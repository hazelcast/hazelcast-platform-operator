name: (2) Operator Certification Tests And Releasing
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: "Version in the form of X.Y[.Z]"
        required: true
  schedule:
    - cron: "0 9 * * *"

env:
  PFLT_PYXIS_API_TOKEN: ${{ secrets.RHEL_API_KEY }}
  NAMESPACE: oc-test-operator-${{ github.run_id }}
  PARDOT_ID: redhat
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator

jobs:
  test_container:
    name: Build and Test Container
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.setup-envs.outputs.RELEASE_VERSION }}
      CONTAINER_IMAGE: ${{ steps.setup-envs.outputs.CONTAINER_IMAGE }}
      CONTAINER_IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
    steps:
      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v3

      - name: Setup Preflight and Get Certification Project ID
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Set Environment Variables And Job Outputs
        id: setup-envs
        run: |
          if [[ ${{ github.event_name == 'schedule' }} == true ]]; then
              echo "RELEASE_VERSION=1.0.0" >> $GITHUB_ENV
              echo "RELEASE_VERSION=1.0.0" >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name == 'workflow_dispatch' }} == true ]]; then
              echo "RELEASE_VERSION=${{ github.event.inputs.RELEASE_VERSION }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ github.event.inputs.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name == 'push' }} == true ]]; then
              echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
          fi
              CONTAINER_IMAGE=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen):5d
              echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> $GITHUB_ENV
              echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> $GITHUB_OUTPUT

      - name: Validate version
        run: |
          NUMBER='(0|[1-9][0-9]*)'
          echo ${RELEASE_VERSION} | egrep "^$NUMBER.$NUMBER(.$NUMBER)?$"

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.4.0
        with:
          install: true

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Build Image
        id: build-image
        uses: docker/build-push-action@v3.3.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{github.sha}}
            pardotID=dockerhub
          file: Dockerfile
          push: true
          tags: ${{ steps.setup-envs.outputs.CONTAINER_IMAGE }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d

      - name: Initiating a Container Scan
        run: |
          echo "Running the container scan tests"
          preflight check container $CONTAINER_IMAGE
          grep -E -q "Preflight result: PASSED\"( |$)" preflight.log || exit 1

  openscap_image_scan:
    name: Run OpenSCAP Vulnerability Scan
    needs: test_container
    defaults:
      run:
        shell: bash
    env:
      CONTAINER_IMAGE: ${{ needs.test_container.outputs.CONTAINER_IMAGE }}
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Run OpenSCAP Vulnerability Scan
        id: vulnerabilityScan
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SCANHOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          envs: CONTAINER_IMAGE
          script: |
            sudo podman pull $CONTAINER_IMAGE
            sudo oscap-podman $CONTAINER_IMAGE oval eval --report vulnerability_report.html rhel-8.oval.xml | grep -E 'true' && exit 1 || echo "Vulnerabilty scan passed"

      - name: Download Scan Report
        if: failure() && steps.vulnerabilityScan.outcome == 'failure'
        uses: nicklasfrahm/scp-action@v1.0.1
        with:
          direction: download
          host: ${{ secrets.SCANHOST }}
          username: ec2-user
          fingerprint: ${{ secrets.FINGERPRINT }}
          key: ${{ secrets.KEY }}
          source: ~/vulnerability_report.html
          target: vulnerability_report.html

      - name: Save Scan Report As Artifact
        uses: actions/upload-artifact@v3
        if: failure() && steps.vulnerabilityScan.outcome == 'failure'
        with:
          name: vulnerability-report
          path: vulnerability_report.html

  build_bundle:
    name: Build Bundle and Index Image
    needs: [test_container, openscap_image_scan]
    defaults:
      run:
        shell: bash
    env:
      CONTAINER_IMAGE: ${{ needs.test_container.outputs.CONTAINER_IMAGE }}
      CONTAINER_IMAGE_DIGEST: ${{ needs.test_container.outputs.CONTAINER_IMAGE_DIGEST }}
      RELEASE_VERSION: ${{ needs.test_container.outputs.RELEASE_VERSION }}
    outputs:
      BUNDLE_VERSION: ${{ steps.build-bundle-outputs.outputs.BUNDLE_VERSION }}
      BUNDLE_IMAGE: ${{ steps.build-bundle-outputs.outputs.BUNDLE_IMAGE }}
      BUNDLE_IMAGE_DIGEST: ${{ steps.push-bundle-image.outputs.BUNDLE_IMAGE_DIGEST }}
      PFLT_INDEXIMAGE: ${{ steps.build-bundle-outputs.outputs.PFLT_INDEXIMAGE }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v3

      - name: Setup Preflight and OPM Tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - uses: redhat-actions/openshift-tools-installer@v1
        with:
          opm: "latest"
          skip_cache: true

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Set Environment Variables And Job Outputs
        id: build-bundle-outputs
        run: |
          BUNDLE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          BUNDLE_REPOSITORY=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen)
          BUNDLE_IMAGE=$BUNDLE_REPOSITORY:5d
          PFLT_INDEXIMAGE=$BUNDLE_REPOSITORY-index:5d
          echo "BUNDLE_VERSION=${BUNDLE_VERSION}" >> $GITHUB_ENV
          echo "BUNDLE_REPOSITORY=${BUNDLE_REPOSITORY}" >> $GITHUB_ENV
          echo "BUNDLE_IMAGE=${BUNDLE_IMAGE}" >> $GITHUB_ENV
          echo "PFLT_INDEXIMAGE=${PFLT_INDEXIMAGE}" >> $GITHUB_ENV
          echo "BUNDLE_VERSION=${BUNDLE_VERSION}" >> $GITHUB_OUTPUT
          echo "BUNDLE_IMAGE=${BUNDLE_IMAGE}" >> $GITHUB_OUTPUT
          echo "PFLT_INDEXIMAGE=${PFLT_INDEXIMAGE}" >> $GITHUB_OUTPUT

      - name: Build Bundle
        run: |
          IMAGE_NAME_DIGEST=${CONTAINER_IMAGE}@${CONTAINER_IMAGE_DIGEST}
          make bundle IMG=${IMAGE_NAME_DIGEST} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: v4.8
            operators.operatorframework.io.bundle.channel.default.v1: alpha
          EOF

      - name: Upload Bundle Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bundle-artifacts
          path: ./bundle/

      - name: Build and Push Bundle Image
        id: push-bundle-image
        run: |
          docker build -f bundle.Dockerfile -t ${BUNDLE_IMAGE} .
          docker push ${BUNDLE_IMAGE}
          BUNDLE_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${BUNDLE_IMAGE} | cut -d'@' -f2)
          echo "BUNDLE_IMAGE_DIGEST=${BUNDLE_IMAGE_DIGEST}" >> $GITHUB_OUTPUT

      - name: Create Bundle Index
        run: |
          opm index add --bundles ${BUNDLE_IMAGE} --tag ${PFLT_INDEXIMAGE}
          podman push ${PFLT_INDEXIMAGE}

  test_operator:
    name: Test Operator Bundle
    needs: build_bundle
    runs-on: ubuntu-latest
    env:
      PFLT_INDEXIMAGE: ${{ needs.build_bundle.outputs.PFLT_INDEXIMAGE }}
      BUNDLE_IMAGE: ${{ needs.build_bundle.outputs.BUNDLE_IMAGE }}
      BUNDLE_IMAGE_DIGEST: ${{ needs.build_bundle.outputs.BUNDLE_IMAGE_DIGEST }}
      OCP_CLUSTER_URL: ${{ secrets.OCP_CLUSTER_URL }}
      OCP_USERNAME: ${{ secrets.OCP_USERNAME }}
      OCP_PASSWORD: ${{ secrets.OCP_PASSWORD }}
      KUBECONFIG: $HOME/.kube/config
    steps:
      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v3

      - name: Setup Preflight and Operator SDK
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - uses: redhat-actions/openshift-tools-installer@v1
        with:
          operator-sdk: "latest"
          skip_cache: true

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Login to OCP and Create New Project
        id: project_creation
        run: |
          oc login ${OCP_CLUSTER_URL} -u=${OCP_USERNAME} -p=${OCP_PASSWORD} --insecure-skip-tls-verify
          oc new-project ${NAMESPACE}
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Initiating an Operator Bundle Scan
        run: |
          preflight check operator ${BUNDLE_IMAGE}@${BUNDLE_IMAGE_DIGEST}
          grep -E -q "Preflight result: PASSED\"( |$)" preflight.log || exit 1

      - name: Clean Up Openshift Namespace
        if: always() && steps.project_creation.outputs.exit_code == 0
        run: |
          oc delete project ${NAMESPACE}

  community_operators_test_suite:
    needs: build_bundle
    uses: ./.github/workflows/community-operator-tests.yaml
    with:
      BUNDLE_VERSION: ${{ needs.build_bundle.outputs.BUNDLE_VERSION }}

  publish_release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test_container, test_operator, community_operators_test_suite]
    uses: ./.github/workflows/publish-release.yaml
    with:
      RELEASE_VERSION: ${{ needs.test_container.outputs.RELEASE_VERSION }}
    secrets: inherit

  clean_up_artifacts:
    if: always()
    needs: [ build_bundle, openscap_image_scan, community_operators_test_suite ]
    runs-on: ubuntu-latest
    name: Clean The Bundle Artifact and Test Image
    steps:
      - name: Delete Bundle Artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            bundle-artifacts

      - name: Delete Test Image For Security Scan
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SCANHOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: sudo podman image prune -af