name: (2) Operator Certification Tests And Releasing
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: "Version in the form of X.Y[.Z]"
        required: true
  schedule:
    - cron: "0 9 * * *"

env:
  PFLT_PYXIS_API_TOKEN: ${{ secrets.RHEL_API_KEY }}
  NAMESPACE: oc-test-operator-${{ github.run_id }}
  PARDOT_ID: redhat
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator

jobs:
  test_container:
    name: Build and Test Container
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.setup-envs.outputs.RELEASE_VERSION }}
      CONTAINER_IMAGE: ${{ steps.setup-envs.outputs.CONTAINER_IMAGE }}
      CONTAINER_IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
    steps:
      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v3
        

      - name: Print GitHub Environment Variables as JSON
        run: |
          echo "${{ toJson(github) }}"

      - name: Setup Preflight and Get Certification Project ID
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Set Environment Variables And Job Outputs
        id: setup-envs
        run: |
          if [[ ${{ github.event_name == 'schedule' }} == true ]]; then
              echo "RELEASE_VERSION=1.0.0" >> $GITHUB_ENV
              echo "RELEASE_VERSION=1.0.0" >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name == 'workflow_dispatch' }} == true ]]; then
              echo "RELEASE_VERSION=${{ github.event.inputs.RELEASE_VERSION }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ github.event.inputs.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name == 'push' }} == true ]]; then
              echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_OUTPUT
          fi
              CONTAINER_IMAGE=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen):5d
              echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> $GITHUB_ENV
              echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> $GITHUB_OUTPUT

  publish_release:
    if: ${{ github.ref == 'refs/heads/$RELEASE_VERSION' }}
    needs: [test_container]
    uses: ./.github/workflows/publish-release.yaml
    with:
      RELEASE_VERSION: ${{ needs.test_container.outputs.RELEASE_VERSION }}
    secrets: inherit
