name: Nightly E2E tests on AWS
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

env:
  AWS_REGION: us-east-1
  KUBECTL_VERSION: 1.22.0
jobs:
  prepare-env:
    name: Create EKS cluster
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |-
          curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Create EKS cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          eksctl create cluster --name "${CLUSTER_NAME}" \
            --zones ${AWS_REGION}a --zones ${AWS_REGION}c \
            --with-oidc --without-nodegroup
          eksctl create nodegroup --cluster "${CLUSTER_NAME}" \
            --name node-group-1 --node-type t3.medium \
            --nodes 3 --nodes-min 2 --nodes-max 4 --managed

  eks-e2e-tests:
    name: Run e2e test on EKS
    runs-on: ubuntu-20.04
    needs: "prepare-env"
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        edition: [ 'os', 'ee' ]
    env:
      NAMESPACE: test-operator-nightly-${{ matrix.edition }}
      IMG: hazelcast/hazelcast-platform-operator:latest-snapshot
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install kubectl
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/bin
          echo "${GITHUB_WORKSPACE}/bin" >> ${GITHUB_PATH}
          curl -L https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl \
            -o ${GITHUB_WORKSPACE}/bin/kubectl && chmod +x ${GITHUB_WORKSPACE}/bin/kubectl

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          aws eks update-kubeconfig --name "${CLUSTER_NAME}"

      - name: Build Image
        if: github.event_name == 'workflow_dispatch'
        run: |
          IMG=ttl.sh/$(uuidgen):1h
          echo "IMG=${IMG}" >> $GITHUB_ENV

          make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
          make docker-push IMG=$IMG

      - name: Deploy Operator to EKS
        run: |
          kubectl create namespace ${NAMESPACE}
          kubectl config set-context --current --namespace=${NAMESPACE}

          DEPLOY_NAME=${NAME_PREFIX}controller-manager

          make deploy NAMESPACE=${NAMESPACE} IMG=${IMG} NAME_PREFIX=${NAME_PREFIX}
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secret
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${NAMESPACE} --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

      - name: Run Hazelcast E2E tests on EKS
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=${NAMESPACE} NAME_PREFIX=${NAME_PREFIX}

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

  delete-cluster:
    name: Delete EKS cluster
    runs-on: ubuntu-20.04
    if: always()
    needs: [ "prepare-env", "eks-e2e-tests" ]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |-
          curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Delete EKS cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          eksctl delete nodegroup --cluster "${CLUSTER_NAME}" --name node-group-1
          eksctl delete cluster "${CLUSTER_NAME}" --wait

  slack_notify:
    name: Slack Notify
    needs: [ 'eks-e2e-tests', 'delete-cluster' ]
    if: always() && ( needs.eks-e2e-tests.result != 'success' || needs.delete-cluster.result != 'success') 
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@f3635935f58910a6d6951b73efe9037c960c8c04
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
