name: Nightly E2E tests on AWS
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

env:
  AWS_REGION: us-east-1
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
jobs:
  prepare-env:
    name: Create EKS cluster
    runs-on: ubuntu-latest
    outputs:
      CLUSTER_NAME: ${{ steps.create-cluster.outputs.CLUSTER_NAME }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |-
          curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Create EKS cluster
        id: create-cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          echo "::set-output name=CLUSTER_NAME::${CLUSTER_NAME}"
          eksctl create cluster --name "${CLUSTER_NAME}" \
            --zones ${AWS_REGION}a --zones ${AWS_REGION}c \
            --with-oidc --without-nodegroup
          eksctl create nodegroup --cluster "${CLUSTER_NAME}" \
            --name node-group-1 --node-type t3.medium \
            --nodes 3 --nodes-min 2 --nodes-max 4 --managed

  new-relic-setup:
    name: Setup New Relic agent
    needs: "prepare-env"
    env:
      NR_CLUSTER_NAME: gke-operator
      CLUSTER_NAME: ${{ needs.prepare-env.outputs.CLUSTER_NAME }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |-
          aws eks update-kubeconfig --name "${{ env.CLUSTER_NAME }}"

      - name: Install New Relic repo
        run: |
          helm repo add newrelic https://helm-charts.newrelic.com

      - name: Install New Relic agent
        run: |
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          kubectl create namespace newrelic
          helm install --namespace=newrelic newrelic-bundle -f .github/newrelic/newrelic-values.yaml \
            --set "global.cluster=aws-operator" \
            --set "global.licenseKey=${{ secrets.NEW_RELIC_LICENCE_KEY }}" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[0].name=K_CLUSTER_NAME,newrelic-logging.fluentBit.additionalEnvVariables[0].value=${{ env.CLUSTER_NAME }}" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[1].name=GITHUB_RUN_ID,newrelic-logging.fluentBit.additionalEnvVariables[1].value=\"${{ github.run_id }}\"" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[2].name=GITHUB_RUN_NUMBER,newrelic-logging.fluentBit.additionalEnvVariables[2].value=\"${{ github.run_number }}\"" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[3].name=GITHUB_SHA,newrelic-logging.fluentBit.additionalEnvVariables[3].value=${{ github.sha }}" \
            newrelic/nri-bundle

  get-image:
    name: Get Image
    runs-on: ubuntu-latest
    outputs:
      IMG: ${{ steps.build-img.outputs.IMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and push image to ttl.sh
        id: build-img
        run: |
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            IMG=ttl.sh/$(uuidgen):2h
            echo "::set-output name=IMG::${IMG}"
            make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
            make docker-push IMG=$IMG
          else
            IMG=hazelcast/hazelcast-platform-operator:latest-snapshot
            echo "::set-output name=IMG::${IMG}"
          fi

  eks-e2e-tests:
    name: Run e2e test on EKS
    runs-on: ubuntu-latest
    needs: ["prepare-env", "new-relic-setup", "get-image"]
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    env:
      NAMESPACE: test-operator-nightly-${{ matrix.edition }}
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
      IMG: ${{ needs.get-image.outputs.IMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          aws eks update-kubeconfig --name "${CLUSTER_NAME}"

      - name: Deploy Operator to EKS
        run: |
          kubectl create namespace ${NAMESPACE}
          kubectl label namespace ${NAMESPACE} newrelic.com/scrape=true
          kubectl config set-context --current --namespace=${NAMESPACE}

          DEPLOY_NAME=${NAME_PREFIX}controller-manager

          make deploy NAMESPACE=${NAMESPACE} IMG=${IMG} NAME_PREFIX=${NAME_PREFIX}
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${NAMESPACE} --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests on EKS
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=${NAMESPACE} NAME_PREFIX=${NAME_PREFIX} WORKFLOW_ID=eks

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: allure-results/eks/

  report-generation:
    needs: eks-e2e-tests
    if: always()
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: eks

  delete-cluster:
    name: Delete EKS cluster
    runs-on: ubuntu-latest
    if: always()
    needs: ["prepare-env", "eks-e2e-tests"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |-
          curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Delete EKS cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          eksctl delete nodegroup --cluster "${CLUSTER_NAME}" --name node-group-1
          eksctl delete cluster "${CLUSTER_NAME}" --wait

  slack_notify:
    name: Slack Notify
    needs: ["eks-e2e-tests", "delete-cluster"]
    if: always() && ( needs.eks-e2e-tests.result != 'success' || needs.delete-cluster.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@547417cbfcd5c7deaa7e6e2b75685c686f80bec5
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
