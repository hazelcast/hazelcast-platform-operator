name: K8s distribution tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request_target:
    types:
      - labeled
    branches:
      - main
      - 'release/**'
    paths-ignore:
      - "**.md"
  pull_request:
    types:
      - labeled
    branches:
      - main
      - 'release/**'
    paths-ignore:
      - "**.md"

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write

jobs:
  decide-run-tests:
    name: Decide to run tests
    runs-on: ubuntu-22.04
    outputs:
      RUN_TESTS: ${{ steps.should-run-tests.outputs.RUN_TESTS }}
    if: >-
      ( !cancelled()
      && ((github.event_name == 'pull_request_target'
            && github.event.label.name == 'run-all-test'
            && github.event.pull_request.head.repo.full_name != github.repository)
          ||
          (github.event_name == 'pull_request'
            && github.event.label.name == 'run-all-test'
            && github.event.pull_request.head.repo.full_name == github.repository)
          ||
          github.event_name == 'push'
          || 
          github.event_name == 'workflow_dispatch'
        )
      )

    steps:
      - name: Decide to run tests
        id: should-run-tests
        run: |
          if [[ '${{ github.event_name }}' != 'push' ]]; then
            echo "RUN_TESTS=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          COMMIT_MESSAGE='${{ github.event.commits[0].message }}'
          PR_NUMBER=$(echo $COMMIT_MESSAGE | grep -oP '\(#\K[0-9]*(?=\))')
          PR_LABELS=$( (gh pr view https://github.com/${{github.repository}}/pull/${PR_NUMBER} --json labels  | jq .labels[].name) || echo "Could not get PR labels")
          for label in $PR_LABELS; do
            # if full suite is ran before 
            if [[ "$label" == '"run-all-test"' ]]; then
              echo "RUN_TESTS=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "RUN_TESTS=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print decision
        run: echo "Run tests= ${{ steps.should-run-tests.outputs.RUN_TESTS }}"

  run-aks:
    needs: decide-run-tests
    if: needs.decide-run-tests.outputs.RUN_TESTS == 'true' 
    uses: ./.github/workflows/e2e-aks.yaml
    secrets: inherit

  run-eks:
    needs: decide-run-tests
    if: needs.decide-run-tests.outputs.RUN_TESTS == 'true' 
    uses: ./.github/workflows/e2e-eks.yaml
    secrets: inherit

  run-gke:
    needs: decide-run-tests
    if: needs.decide-run-tests.outputs.RUN_TESTS == 'true' 
    uses: ./.github/workflows/e2e-gke.yaml
    secrets: inherit

  update-test-run-status-badges:
    needs: [run-aks, run-eks, run-gke]
    if: always() && needs.decide-run-tests.outputs.RUN_TESTS == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update Status Badges
        run: |
          source .github/scripts/utils.sh
          update_status_badges ${{ github.run_id }} ${{ secrets.TEST_STATUSES_GIST_ID }} ${{ secrets.GIST_CREATION_TOKEN }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: 1.19.0

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: make test-unit

      - name: Upload Unit Test Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: |
            cover-controllers.out
            cover-internal.out
            cover-api.out
          retention-days: 1

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: 1.19.0

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run integration tests
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          echo "GO_TEST_FLAGS=${GO_TEST_FLAGS}" >> $GITHUB_ENV
          make GO_TEST_FLAGS=${GO_TEST_FLAGS} test-it

      - name: Upload Integration Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: cover_it${{ env.GO_TEST_FLAGS }}.out
          retention-days: 1

  upload-coverage:
    name: Upload Test Coverage
    needs: [unit-tests,integration-tests]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Test Coverage Artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-coverage

      - name: Publish Integration Test results to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: cover_it-ee=true.out,cover_it-ee=false.out
          flags: integration
          name: Integration Tests Report
          fail_ci_if_error: true

      - name: Publish Unit Test results to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: cover-controllers.out,cover-internal.out,cover-api.out
          flags: unit
          name: Unit Tests Report
          fail_ci_if_error: true