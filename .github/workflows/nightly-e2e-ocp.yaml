name: Nightly E2E tests on OCP
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

env:
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}

jobs:
  ocp-e2e-tests:
    name: Run e2e tests at OCP
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        edition: [ 'os', 'ee' ]
    defaults:
      run:
        shell: bash
    env:
      IMG: hazelcast/hazelcast-platform-operator:latest-snapshot
      OCP_CLUSTER_URL: ${{ secrets.OCP_CLUSTER_URL }}
      OCP_USERNAME: ${{ secrets.OCP_USERNAME }}
      OCP_PASSWORD: ${{ secrets.OCP_PASSWORD }}
      HZ_LICENSE_KEY: ${{ secrets.HZ_LICENSE_KEY }}
      NAMESPACE: oc-e2e-test-operator-nightly-${{ matrix.edition }}-${{ github.run_id }}
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
    steps:
      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v3

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Image
        if: github.event_name == 'workflow_dispatch'
        run: |
          IMG=ttl.sh/$(uuidgen):1h
          echo "IMG=${IMG}" >> $GITHUB_ENV

          make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
          make docker-push IMG=$IMG

      - name: Deploy Hazelcast-Platform-Operator to OCP
        run: |
          oc login ${OCP_CLUSTER_URL} -u=${OCP_USERNAME} -p=${OCP_PASSWORD} --insecure-skip-tls-verify
          oc new-project $NAMESPACE

          make deploy IMG=$IMG NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
          oc rollout status deployment ${NAME_PREFIX}controller-manager

      - name: Create secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests at OCP
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX WORKFLOW_ID=ocp
          echo "RUNNING TESTS in $NAMESPACE"

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace KUBECTL=oc NAMESPACE=${NAMESPACE}

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: allure-results/ocp/

  report-generation:
    needs: ocp-e2e-tests
    if: always()
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: ocp

  slack_notify:
    name: Slack Notify
    needs: [ 'ocp-e2e-tests' ]
    if: always() &&  needs.ocp-e2e-tests.result != 'success' 
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@547417cbfcd5c7deaa7e6e2b75685c686f80bec5
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
