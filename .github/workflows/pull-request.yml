name: Pull Request

on:
  pull_request_target:
    types:
      - labeled
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"

permissions:
  contents: read

env:
  GCP_PROJECT_ID: hazelcast-33
  GKE_ZONE: europe-west1-b

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-pr-labels:
    name: Update Draft Release
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter-config.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linter:
    name: Run linters
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Decide which ref to checkout
        id: decide-ref
        run: |
          if [[ "${{github.event_name}}" == "pull_request" ]]; then
            echo "ref=${{github.ref}}" >> $GITHUB_OUTPUT
          else
            echo "ref=refs/pull/${{ github.event.pull_request.number }}/merge" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{steps.decide-ref.outputs.ref}}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.3.1
        if: ${{ !cancelled() }}
        with:
          args: --timeout 3m --build-tags hazelcastinternal

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3
        if: ${{ !cancelled() }}
        with:
          config_file: hack/yamllint.yaml

      - name: Check if bundle.yaml is updated
        run: |
          mv bundle.yaml bundle.yaml.old
          make generate-bundle-yaml

          if ! cmp -s bundle.yaml bundle.yaml.old; then
              echo "Please make sure your branch is up to date with main and run make generate-bundle-yaml"
              exit 1
          fi

  unit-tests:
    name: Run unit and integration tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Decide which ref to checkout
        id: decide-ref
        run: |
          if [[ "${{github.event_name}}" == "pull_request" ]]; then
            echo "ref=${{github.ref}}" >> $GITHUB_OUTPUT
          else
            echo "ref=refs/pull/${{ github.event.pull_request.number }}/merge" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{steps.decide-ref.outputs.ref}}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: make test-unit

      - name: Run integration tests (OS)
        run: make GO_TEST_FLAGS="-ee=false" test-it

      - name: Run integration tests (EE)
        run: make GO_TEST_FLAGS="-ee=true" test-it

  create-gke-cluster:
    name: Create GKE cluster
    runs-on: ubuntu-latest
    needs: ['unit-tests']
    if: >-
      ( !cancelled()
      && ((github.event_name == 'pull_request_target'
            && github.event.action == 'labeled'
            && github.event.label.name == 'safe-to-test'
            && github.event.pull_request.head.repo.full_name != github.repository)
          ||
          (github.event_name == 'pull_request'
            && github.event.pull_request.head.repo.full_name == github.repository))
      && needs.unit-tests.result == 'success')
    outputs:
      CLUSTER_NAME: ${{ steps.set-cluster-name.outputs.CLUSTER_NAME }}
    env:
      GCP_NETWORK: operator-test-network
    steps:
      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v1.0.0"
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Create GKE cluster
        id: set-cluster-name
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          gcloud container clusters create ${CLUSTER_NAME} \
            --zone=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --network=${{ env.GCP_NETWORK }} \
            --machine-type=n1-standard-2 \
            --num-nodes=3
          sleep 30

  new-relic-setup:
    name: Setup New Relic
    needs: [ create-gke-cluster ]
    uses: ./.github/workflows/newrelic-gke.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      nr_cluster_name: gke-operator-pull
      gh_run_id: ${{ github.run_id }}
      gh_run_number: ${{ github.run_number }}
      gh_sha: ${{ github.sha }}

  build-image:
    name: Build image
    runs-on: ubuntu-latest
    if: >-
      ( !cancelled()
      && ((github.event_name == 'pull_request_target'
            && github.event.action == 'labeled'
            && github.event.label.name == 'safe-to-test'
            && github.event.pull_request.head.repo.full_name != github.repository)
          ||
          (github.event_name == 'pull_request'
            && github.event.pull_request.head.repo.full_name == github.repository)))
    outputs:
      IMG: ${{ steps.build-img.outputs.IMG }}
    steps:
      - name:  Decide which ref to checkout
        id: decide-ref
        run: |
          if [[ "${{github.event_name}}" == "pull_request" ]]; then
            echo "ref=${{github.ref}}" >> $GITHUB_OUTPUT
          else
            echo "ref=refs/pull/${{ github.event.pull_request.number }}/merge" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{steps.decide-ref.outputs.ref}}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build and push image to ttl.sh
        id: build-img
        run: |
            IMG=ttl.sh/$(uuidgen):2h
            echo "IMG=${IMG}" >> $GITHUB_OUTPUT

            make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
            make docker-push IMG=$IMG

  gke-e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-latest
    needs: [create-gke-cluster, build-image, new-relic-setup]
    if: (!cancelled() && needs.create-gke-cluster.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    env:
      NAMESPACE: test-operator-${{ matrix.edition }}
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
      IMG: ${{ needs.build-image.outputs.IMG }}
    steps:
      - name: Decide which ref to checkout
        id: decide-ref
        run: |
          if [[ "${{github.event_name}}" == "pull_request" ]]; then
            echo "ref=${{github.ref}}" >> $GITHUB_OUTPUT
          else
            echo "ref=refs/pull/${{ github.event.pull_request.number }}/merge" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{steps.decide-ref.outputs.ref}}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v1.0.0"
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Connect to the GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy Operator to GKE
        run: |
          kubectl create namespace ${{ env.NAMESPACE }}
          kubectl config set-context --current --namespace=$NAMESPACE

          DEPLOY_NAME=${NAME_PREFIX}controller-manager
          echo "DEPLOY_NAME=${DEPLOY_NAME}" >> $GITHUB_ENV

          make deploy IMG=$IMG NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secret
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests at GKE
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

  delete-cluster:
    name: Delete Cluster
    runs-on: ubuntu-latest
    if: (always() && needs.create-gke-cluster.result != 'skipped')
    needs: [create-gke-cluster, gke-e2e-tests]
    env:
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
    steps:
      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v1.0.0"
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Delete GKE cluster
        run: |-
          gcloud container clusters delete ${{ env.CLUSTER_NAME }} --zone ${{ env.GKE_ZONE }} --quiet
