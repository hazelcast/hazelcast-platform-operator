name: Pull Request Builder

on:
  pull_request_target:
    types:
      - labeled
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
      - 'release/**'
    paths-ignore:
      - "**.md"

permissions:
  contents: read

env:
  GO_VERSION: '1.19.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linter:
    name: Run linters
    runs-on: ubuntu-latest
    permissions: {}
    if: ( !cancelled() && github.event_name == 'pull_request' )
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ format('>={0}', env.GO_VERSION) }}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.3.1
        if: ${{ !cancelled() }}
        with:
          args: --timeout 3m --build-tags hazelcastinternal

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3
        if: ${{ !cancelled() }}
        with:
          config_file: hack/yamllint.yaml

      - name: Check if bundle.yaml is updated
        run: |
          mv bundle.yaml bundle.yaml.old
          make generate-bundle-yaml

          if ! cmp -s bundle.yaml bundle.yaml.old; then
              echo "Please make sure your branch is up to date with main and run 'make generate-bundle-yaml'"
              exit 1
          fi

  unit-tests:
    name: Run unit and integration tests
    runs-on: ubuntu-latest
    permissions: {}
    if: ( !cancelled() && github.event_name == 'pull_request' )
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ format('>={0}', env.GO_VERSION) }}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: make test-unit

      - name: Run integration tests (OS)
        run: make GO_TEST_FLAGS="-ee=false" test-it

      - name: Run integration tests (EE)
        run: make GO_TEST_FLAGS="-ee=true" test-it

  kind-e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        edition: ["os","ee"]
    if: >-
      ( !cancelled()
      && ((github.event_name == 'pull_request_target'
            && github.event.action == 'labeled'
            && github.event.label.name == 'safe-to-test'
            && github.event.pull_request.head.repo.full_name != github.repository)
          ||
          (github.event_name == 'pull_request'
            && github.event.pull_request.head.repo.full_name == github.repository))
      )
    env:
      NAMESPACE: kind-test-operator-${{ matrix.edition }}
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
      CLUSTER_NAME: kind
    steps:
      - name: Decide which ref to checkout
        id: decide-ref
        run: |
          if [[ "${{github.event_name}}" == "pull_request" ]]; then
            echo "ref=${{github.ref}}" >> $GITHUB_OUTPUT
          else
            echo "ref=refs/pull/${{ github.event.pull_request.number }}/merge" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{steps.decide-ref.outputs.ref}}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ format('>={0}', env.GO_VERSION) }}

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create Kind Config
        run: |
          cat <<EOT >> ./kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          - role: worker
          - role: worker
          - role: worker
          EOT

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.3.0
        with:
          config: ./kind-config.yaml
          cluster_name: ${{ env.CLUSTER_NAME }}

      - name: Install New Relic repo
        run: |
          helm repo add newrelic https://helm-charts.newrelic.com

      - name: Install New Relic agent
        run: |
          kubectl create namespace newrelic
          helm install --namespace=newrelic newrelic-bundle -f .github/newrelic/newrelic-values.yaml \
            --set "global.cluster=kind-operator" \
            --set "global.licenseKey=${{ secrets.NEW_RELIC_LICENCE_KEY }}" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[0].name=K_CLUSTER_NAME,newrelic-logging.fluentBit.additionalEnvVariables[0].value=${{ env.CLUSTER_NAME }}" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[1].name=GITHUB_RUN_ID,newrelic-logging.fluentBit.additionalEnvVariables[1].value=\"${{ github.run_id }}\"" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[2].name=GITHUB_RUN_NUMBER,newrelic-logging.fluentBit.additionalEnvVariables[2].value=\"${{ github.run_number }}\"" \
            --set "newrelic-logging.fluentBit.additionalEnvVariables[3].name=GITHUB_SHA,newrelic-logging.fluentBit.additionalEnvVariables[3].value=${{ github.sha }}" \
            newrelic/nri-bundle

      - name: Install metallb
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: |
              kubectl create namespace ${NAMESPACE}
              kubectl config set-context --current --namespace=$NAMESPACE
              kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
              kubectl wait --for=condition=ready --timeout=60s -n metallb-system pod -l app=metallb
              HOST_MIN=$(docker network inspect -f '{{json .IPAM.Config}}' ${{ env.CLUSTER_NAME }} | jq -r '.[0].Subnet' |  sed  -n 's/.0.0.16/.255.200/p')
              HOST_MAX=$(docker network inspect -f '{{json .IPAM.Config}}' ${{ env.CLUSTER_NAME }} | jq -r '.[0].Subnet' |  sed  -n 's/.0.0.16/.255.250/p')
              IP_RANGE=$HOST_MIN-$HOST_MAX

              cat <<EOF | kubectl apply -f -
              apiVersion: metallb.io/v1beta1
              kind: IPAddressPool
              metadata:
                name: kind-pool
                namespace: metallb-system
              spec:
                addresses:
                - $IP_RANGE
              ---
              apiVersion: metallb.io/v1beta1
              kind: L2Advertisement
              metadata:
                name: l2
                namespace: metallb-system
              spec:
                ipAddressPools:
                - kind-pool
              EOF

      - name: Create Secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
             --namespace ${{ env.NAMESPACE }} \
             --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}

      - name: Create Secret For Both OS and EE Tests
        run: |
          kubectl create secret generic br-secret-gcp \
          --namespace ${{ env.NAMESPACE }} \
          --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

      - name: Build Image
        run: |
          IMG=hazelcast/hazelcast-platform-operator:${{ github.sha }}
          make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
          kind load docker-image $IMG --name ${{ env.CLUSTER_NAME }}
          echo "IMG=${IMG}" >> $GITHUB_ENV

      - name: Deploy Operator to Kind Cluster
        run: |
          DEPLOY_NAME=${NAME_PREFIX}controller-manager
          make deploy IMG=$IMG NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Run Hazelcast E2E Tests
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
