name: Test Report Creation
on:
  workflow_call:
    inputs:
      WORKFLOW_ID:
        required: true
        type: string
      CLUSTER_NAME:
        required: true
        type: string
        
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLEANUP_TIMEOUT: 20
  GITHUB_PAGES_URL: https://${{ github.repository_owner }}.github.io/hazelcast-platform-operator

jobs:
  report-creation:
    name: Test Report Creation
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    environment:
      name: report
      url: ${{ env.GITHUB_PAGES_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Test Run History
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: test-report-pages
          path: test-report-pages

      - name: Download test-report.xml
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: test-report-${{ inputs.WORKFLOW_ID }}
          path: allure-results/${{ inputs.WORKFLOW_ID }}

      - name: Merge test-report.xml files
        run: |-
          source .github/scripts/utils.sh
          merge_xml_test_reports ${{ inputs.WORKFLOW_ID }}

      - name: Removing A First Run Attempt
        if: always()
        run: |
          sleep 10
          sed -i 's/<system-err>\[BeforeEach\].*Retrying...&#xA;/<system-err>/' ${GITHUB_WORKSPACE}/allure-results/${{ inputs.WORKFLOW_ID }}/test-report-*.xml

      - name: Create environment.properties
        run: |-
          echo "GKE=$GITHUB_PAGES_URL/gke" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "EKS=$GITHUB_PAGES_URL/eks" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "AKS=$GITHUB_PAGES_URL/aks" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "OCP=$GITHUB_PAGES_URL/ocp" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "WAN=$GITHUB_PAGES_URL/wan" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "BACKUP=$GITHUB_PAGES_URL/backup" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "PHONE_HOME=$GITHUB_PAGES_URL/ph" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "KIND=$GITHUB_PAGES_URL/pr" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "CLUSTER_SCOPE=$GITHUB_PAGES_URL/cluster_scope" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties

      - name: Create Custom Defects Classification
        run: |-
          echo "[{\"name\":\"Backup Slow Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_backup_slow_test.*\"},{\"name\":\"Expose Externally Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_expose_externally_test.*\"},{\"name\":\"Map Custom Class Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_map_custom_class_test.*\"},{\"name\":\"Map Persistence Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_map_persistence_test.*\"},{\"name\":\"Map Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_map_test.*\"},{\"name\":\"Persistence Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_persistence_test.*\"},{\"name\":\"Hazelcast Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_test.*\"},{\"name\":\"Hazelcast Wan Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_wan_test.*\"},{\"name\":\"Management Center Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*management_center_test.*\"},{\"name\":\"Phone Home Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*phone_home_test.*\"}]" > allure-results/${{ inputs.WORKFLOW_ID }}/categories.json

      - name: Generate Test Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results/${{ inputs.WORKFLOW_ID }}
          gh_pages: test-report-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 10
          subfolder: ${{ inputs.WORKFLOW_ID }}

      - name: Update 'allure-history' Folder Permission
        run: |
          sudo chown -R $USER:$USER allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}

      - name: Update Test Files
        run: |-
          source .github/scripts/utils.sh
          update_test_files ${{ inputs.WORKFLOW_ID }} ${{ inputs.CLUSTER_NAME }} ${{ github.repository_owner }} 

      - name: Update environment.properties
        run: |-
          cd allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/widgets
          cat <<< $(jq -e 'del(.[] | select(has("name") and (.name | select(contains("URL")))))' environment.json) > environment.json

      - name: Update Summary Report
        run: |-
          cd allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/widgets
          cat <<< $(jq -e '.reportName="${{ github.workflow }}"' summary.json) > summary.json

      - name: Update Hazelcast Logo
        run: |-
          sed -i "s/>Allure</></g" allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/app.js
          sed -i "s/Allure Report/Hazelcast Operator Test Report/g" allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/index.html
          sed -i "s/<link rel=\"favicon\" href=\"favicon.ico?v=2\">/<link rel=\"shortcut icon\" type=\"image\/x-icon\" href=\"favicon.ico\">/g" allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/index.html
          mv -f test-report-pages/styles.css allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}
          mv -f test-report-pages/favicon.ico allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}

      - name: Update The 'test-report-pages' Branch
        run: |
          git fetch origin test-report-pages

      - name: Deploy Report to Github Pages
        if: always()
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          branch: test-report-pages
          folder: allure-history
          token: ${{ secrets.GITHUB_TOKEN }}
          force: false
          commit-message: deploy report with run number ${{ github.run_number }} and commit

      - name: Cleanup Page Publish Runs
        if: ${{ !cancelled() }}
        run: |
          source .github/scripts/utils.sh
          cleanup_page_publish_runs ${GITHUB_REPOSITORY} "pages-build-deployment" ${{ github.run_number }} $CLEANUP_TIMEOUT

      - name: Add Test Report Summary To PR
        if: ${{ contains(inputs.WORKFLOW_ID, 'pr') }}
        run: |
          sudo apt-get install libxml2-utils
          # Define an array to store test run status
          declare -a test_run_status
          
          # Define an associative array to map report names to suite IDs
          declare -A suite_ids=(
              ["test-report-ee-01.xml"]="fb850ba25ceb06c7b2b56dd821744585"
              ["test-report-os-01.xml"]="0b301d038a17885b818e60273771cfeb"
          )

          # Initialize the table header
          comment="Test Results\n--\n|| Total Tests | ðŸ”´ Failures | ðŸŸ  Errors | âšª Skipped |\n| :----: | :----: | :----: | :----: | :----: |\n"

          # Loop through the test reports and generate a table row for each one
          for report in "${!suite_ids[@]}"
          do
              # Extract the relevant data from the test report using xmllint
              tests=$(xmllint --xpath 'string(//testsuites/testsuite/@tests)' "${GITHUB_WORKSPACE}/allure-results/pr/${report}")
              failures=$(xmllint --xpath 'string(//testsuites/testsuite/@failures)' "${GITHUB_WORKSPACE}/allure-results/pr/${report}")
              errors=$(xmllint --xpath 'string(//testsuites/testsuite/@errors)' "${GITHUB_WORKSPACE}/allure-results/pr/${report}")
              skipped=$(xmllint --xpath 'string(//testsuites/testsuite/@skipped)' "${GITHUB_WORKSPACE}/allure-results/pr/${report}")
          
              # Save status of the test run
              test_run_status+=("$([ "$failures" -gt 0 ] && echo true || echo false)" "$([ "$errors" -gt 0 ] && echo true || echo false)")

              # Get the suite ID from the array
              suite_id=${suite_ids[$report]}

              # Extract the substring "EE" or "OS" from the report name
              type="${report#test-report-}"
              type="${type%-01.xml}"

              # Construct a table row with a link to the test report
              link="$GITHUB_PAGES_URL/pr/${{ github.run_number }}/#suites/${suite_id}"
              row="| [${type^^}](${link}) | $tests | $failures | $errors| $skipped |\n"

              # Append the row to the output
              comment+="$row"
          done

          # Send the output as a comment on the pull request using gh
          if [[ "${test_run_status[*]}" == *"true"* ]]; then
             echo -e "$comment" | gh pr comment ${{ github.event.pull_request.number }} -F -
          fi