name: Test Report Creation
on:
  workflow_call:
    inputs:
      WORKFLOW_ID:
        required: true
        type: string
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLEANUP_TIMEOUT: 10
  GITHUB_PAGES_URL: https://${{ github.repository_owner }}.github.io/hazelcast-platform-operator
  NEW_RELIC_BASE_URL: https://one.eu.newrelic.com/launcher/logger.log-launcher
  NEW_RELIC_SHORT_URL_GEN: https://urly.service.newrelic.com
  NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}

jobs:
  report-creation:
    name: Test Report Creation
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    environment:
      name: report
      url: ${{ env.GITHUB_PAGES_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Test Run History
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: test-report-pages
          path: test-report-pages

      - name: Download test-report.xml
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: test-report
          path: allure-results/${{ inputs.WORKFLOW_ID }}

      - name: Create environment.properties
        run: |-
          echo "GKE=$GITHUB_PAGES_URL/gke" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "OCP=$GITHUB_PAGES_URL/ocp" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "EKS=$GITHUB_PAGES_URL/eks" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "AKS=$GITHUB_PAGES_URL/aks" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "BACKUP=$GITHUB_PAGES_URL/backup" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "PHONE_HOME=$GITHUB_PAGES_URL/ph" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties
          echo "WAN=$GITHUB_PAGES_URL/wan" >> allure-results/${{ inputs.WORKFLOW_ID }}/environment.properties

      - name: Create Custom Defects Classification
        run: |-
          echo "[{\"name\":\"Backup Slow Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_backup_slow_test.*\"},{\"name\":\"Expose Externally Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_expose_externally_test.*\"},{\"name\":\"Map Custom Class Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_map_custom_class_test.*\"},{\"name\":\"Map Persistence Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_map_persistence_test.*\"},{\"name\":\"Map Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_map_test.*\"},{\"name\":\"Persistence Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_persistence_test.*\"},{\"name\":\"Hazelcast Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_test.*\"},{\"name\":\"Hazelcast Wan Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*hazelcast_wan_test.*\"},{\"name\":\"Management Center Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*management_center_test.*\"},{\"name\":\"Phone Home Tests\",\"matchedStatuses\":[\"broken\",\"failed\"],\"traceRegex\":\".*phone_home_test.*\"}]" > allure-results/${{ inputs.WORKFLOW_ID }}/categories.json

      - name: Generate Test Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: allure-results/${{ inputs.WORKFLOW_ID }}
          gh_pages: test-report-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 100
          subfolder: ${{ inputs.WORKFLOW_ID }}

      - name: Update Permission
        run: |
          sudo chown -R $USER:$USER allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}

      - name: Update Test Files
        run: |-
          cd allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/data/test-cases
          BEGIN_TIME=$(date +%s000 -d "- 3 hours")
          END_TIME=$(date +%s000 -d "+ 1 hours")
          for i in $(ls); do
          CR_ID=$(jq -r '.testStage.steps[].name | select(contains("CR_ID")) | sub("CR_ID:"; "")' $i)
          LAUNCHER=$(echo "{\"isEntitled\":true,\"query\":\"pod_name:\\\"$CR_ID*\\\" OR message:\\\"*$CR_ID*\\\"\",\"eventTypes\":[\"Log\"]}" | base64 -w0)
          PANE=$(echo "{\"nerdletId\":\"logger.log-tailer\",\"accountId\":${NEW_RELIC_ACCOUNT_ID}}" | base64 -w0)
          LINK=$(echo $NEW_RELIC_BASE_URL\?launcher\="$LAUNCHER"\&pane\="$PANE"\&platform%5BtimeRange%5D%5Bbegin_time%5D\="$BEGIN_TIME"\&platform%5BtimeRange%5D%5Bend_time%5D\="$END_TIME")
          SHORT_LINK=$(curl -s -X POST \
                      $NEW_RELIC_SHORT_URL_GEN \
                      -H "Content-Type: application/json" \
                      -H "Api-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
                      -d '{"url":"'"$LINK"'"}' | jq -r '.url')

          cat <<< $(jq -e 'del(.testStage.steps[] | select(has("name") and (.name | select(contains("CR_ID")|not)) and (.name | select(contains("Text")|not))))
                           |.extra.tags={"tag": .testStage.steps[].name | select(contains("CR_ID"))}
                           |del(.testStage.steps[] | select(.name | select(contains("CR_ID"))))
                           |.extra.tags.tag |= sub("CR_ID:"; "")
                           |.testStage.steps[].name |= sub("&{Text:";"")
                           |.testStage.steps[].name |= sub("}";"")
                           |walk(if type == "object" and .steps then . | .time={"duration": .name} else . end)
                           |.testStage.steps[].name |= sub(" Duration.*";"")
                           |.testStage.steps[].time.duration |= sub(".*Duration:";"")
                           |.testStage.steps[].time.duration |= (if contains("ms") then split("ms") | .[0]|tonumber elif contains("m") then split("m") | ((.[0]|tonumber)*60+(.[1]|.|= sub("s";"")|tonumber))*1000 elif contains("s") then split("s") | .[0]|tonumber*1000 else . end)
                           |.testStage.steps[]+={status: "passed"}
                           |(if .status=="failed" then .+={links: [.statusTrace|split("\n")
                           |to_entries
                           |walk(if type == "object" and (.value | select(contains("hazelcast-platform-operator/hazelcast-platform-operator"))) then . else . end)
                           |del(.[].key)
                           |.[].value|=sub("\\t";"")
                           |.[].value|=sub("\\+0.*";"")
                           |.[].value|=sub(" ";"")
                           |.[].value|= sub("/home/runner/work/hazelcast-platform-operator/hazelcast-platform-operator";"https://github.com/${{ github.repository_owner }}/hazelcast-platform-operator/blob/main")
                           |.[].value|= sub(".go:";".go#L")
                           |unique
                           |to_entries[]
                           |.+={name: ("ERROR_LINE"+ "_" + (.key|tonumber+1|tostring))}
                           |.url+=.value[]
                           |del(.key)|del(.value)
                           |.+={type: "issue"}]}
                           |.testStage.steps[-1]+={status: "failed"} else . end)
                           |.links|= [{"name":"LOGS","url":"'"$SHORT_LINK"'",type: "tms"}] + .' $i) > $i
          done

      - name: Update environment.properties
        run: |-
          cd allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/widgets
          cat <<< $(jq -e 'del(.[] | select(has("name") and (.name | select(contains("URL")))))' environment.json) > environment.json

      - name: Update Summary Report
        run: |-
          cd allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/widgets
          cat <<< $(jq -e '.reportName="${{ github.workflow }}"' summary.json) > summary.json

      - name: Update Hazelcast Logo
        run: |-
          sed -i "s/>Allure</></g" allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/app.js
          sed -i "s/Allure Report/Hazelcast Operator Test Report/g" allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}/index.html
          mv -f test-report-pages/styles.css allure-history/${{ inputs.WORKFLOW_ID }}/${GITHUB_RUN_NUMBER}

      - name: Deploy Report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: test-report-pages
          publish_dir: allure-history
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          commit_message: deploy report with run number ${{ github.run_number }} and commit

      - name: Cleanup Page Publish Runs
        if: always()
        run: |
          source .github/scripts/utils.sh
          cleanup_page_publish_runs ${GITHUB_REPOSITORY} "pages-build-deployment" ${GITHUB_RUN_NUMBER} $CLEANUP_TIMEOUT

      - name: Delete Test Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: test-report
