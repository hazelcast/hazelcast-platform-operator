name: (E2E) GKE Tests
on:
  workflow_dispatch:
  workflow_call:

env:
  GCP_PROJECT_ID: hazelcast-33
  GKE_ZONE: us-east1-b
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator
  AWS_REGION: us-east-1
  FIREWALL_RULE_NAME: node-port-range

jobs:
  create-gke-cluster:
    name: Create GKE cluster
    runs-on: ubuntu-latest
    outputs:
      CLUSTER_NAME: ${{ steps.set-cluster-name.outputs.CLUSTER_NAME }}
    env:
      GCP_NETWORK: operator-test-network
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v2.1.3"
        with:
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Create GKE cluster
        id: set-cluster-name
        run: |-
          CLUSTER_NAME="operator-e2e-test-gke-${GITHUB_SHA::8}-${{ github.run_number }}"
          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          gcloud container clusters create ${CLUSTER_NAME} \
            --zone=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --network=${{ env.GCP_NETWORK }} \
            --machine-type=n1-standard-16 \
            --workload-pool=${{ env.GCP_PROJECT_ID }}.svc.id.goog \
            --num-nodes=3
          sleep 30

      - name: Create Firewall Rules if not existing
        run: |-
          gcloud compute firewall-rules create ${FIREWALL_RULE_NAME} \
            --allow tcp:30000-32767 \
            --network=${{ env.GCP_NETWORK }} | true

          gcloud compute firewall-rules update ${FIREWALL_RULE_NAME} \
          --source-ranges="192.0.2.0/24" \
          --project ${{ env.GCP_PROJECT_ID }}

      - name: Ensure Service Account allows using Workload Identity
        run: |-
          gcloud iam service-accounts add-iam-policy-binding cn-workload-identity-test@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --project ${{ env.GCP_PROJECT_ID }} \
            --role roles/iam.workloadIdentityUser \
            --member "serviceAccount:${{ env.GCP_PROJECT_ID }}.svc.id.goog[test-operator-os/cn-workload-identity-test]" \
            --member "serviceAccount:${{ env.GCP_PROJECT_ID }}.svc.id.goog[test-operator-ee/cn-workload-identity-test]"

  grafana-setup:
    needs: [create-gke-cluster]
    uses: ./.github/workflows/grafana-agent.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      cluster_type: gke
      gh_run_id: ${{ github.run_id }}
      gh_run_number: ${{ github.run_number }}
      gh_sha: ${{ github.sha }}
      namespaces: "test-operator-os, test-operator-ee"

  get-image:
    name: Get Image
    runs-on: ubuntu-latest
    outputs:
      IMG: ${{ steps.get-image-tag.outputs.IMG }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.3.0
        with:
          install: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GAR
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Generate Image Name
        id: get-image-tag
        run: |
          echo "IMG=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen):5d" >> $GITHUB_OUTPUT

      - name: Build Image
        uses: docker/build-push-action@v6.1.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{github.sha}}
            pardotID=dockerhub
          file: Dockerfile
          push: true
          tags: ${{ steps.get-image-tag.outputs.IMG }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d

  gke-e2e-tests:
    name: Run e2e test on GKE
    runs-on: ubuntu-latest
    needs: [create-gke-cluster, grafana-setup, get-image]
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    env:
      NAMESPACE: test-operator-${{ matrix.edition }}
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      RELEASE_NAME: hp-${{ matrix.edition }}-${{ github.run_id }}
      IMG: ${{ needs.get-image.outputs.IMG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.21.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY
            HZ_LICENSE_KEY,CN/HZ_LICENSE_KEY
            AZURE_STORAGE_KEY,CN/AZURE_STORAGE_KEY

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v2.1.3"
        with:
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Authenticate to GAR
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Connect to the GKE cluster
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Get GH Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Update Firewall Rules
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 1
          max_attempts: 3
          retry_on: error
          command: |
            EXISTING_SOURCES=$(gcloud compute firewall-rules describe ${FIREWALL_RULE_NAME} \
            --format="get(sourceRanges)" \
            --project ${{ env.GCP_PROJECT_ID }} |  sed 's/;/,/g')
            NEW_SOURCE_RANGES="${EXISTING_SOURCES},${{ steps.ip.outputs.ipv4 }}/32"

            gcloud compute firewall-rules update ${FIREWALL_RULE_NAME} \
            --source-ranges=$NEW_SOURCE_RANGES \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy Operator to GKE
        run: |
          make install-crds
          kubectl create namespace ${NAMESPACE}
          kubectl config set-context --current --namespace=$NAMESPACE

          DEPLOY_NAME=${RELEASE_NAME}-hazelcast-platform-operator
          make install-operator IMG=$IMG NAMESPACE=$NAMESPACE RELEASE_NAME=$RELEASE_NAME
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secrets and service accounts
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ env.NAMESPACE }} --from-literal=license-key=${{ env.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ env.AZURE_STORAGE_KEY }}

          kubectl create serviceaccount cn-workload-identity-test --namespace ${NAMESPACE}

          kubectl annotate serviceaccount cn-workload-identity-test --namespace ${NAMESPACE} \
            iam.gke.io/gcp-service-account=cn-workload-identity-test@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ env.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests at GKE
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE RELEASE_NAME=$RELEASE_NAME REPORT_SUFFIX=${{ matrix.edition }}_01 WORKFLOW_ID=gke

      - name: Check if the operator pod has not restarted
        run: |
          source .github/scripts/utils.sh
          assert_operator_pod_not_restarted ${NAMESPACE}

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

      - name: Upload Test Report
        if: always() && github.event_name != 'workflow_dispatch'
        uses: actions/upload-artifact@v3
        with:
          name: test-report-gke
          path: allure-results/gke/

  update-test-run-status-badge:
    runs-on: ubuntu-latest
    needs: gke-e2e-tests
    if: always() && github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            TEST_STATUSES_GIST_ID,CN/TEST_STATUSES_GIST_ID
            GIST_CREATION_TOKEN,CN/GIST_CREATION_TOKEN

      - name: Update Status Badge
        run: |
          source .github/scripts/utils.sh
          update_status_badges ${{ github.run_id }} ${{ env.TEST_STATUSES_GIST_ID }} ${{ env.GIST_CREATION_TOKEN }}

  report-generation:
    needs: ["gke-e2e-tests", "create-gke-cluster"]
    if: always() && (needs.gke-e2e-tests.result == 'success' || needs.gke-e2e-tests.result == 'failure') && github.event_name != 'workflow_dispatch'
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: gke
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}

  cleanup-namespaces:
    if: always()
    needs: ["create-gke-cluster", "gke-e2e-tests"]
    uses: ./.github/workflows/cleanup-namespace.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      cluster_type: gke
      namespaces: "test-operator-os,test-operator-ee,grafana"

  delete-cluster:
    name: Delete GKE cluster
    runs-on: ubuntu-latest
    if: always()
    needs: [create-gke-cluster, gke-e2e-tests, cleanup-namespaces]
    env:
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v2.1.3"
        with:
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Delete Firewall Rule
        run: |-
          gcloud compute firewall-rules list --project "$PROJECT_ID" --filter="name=($FIREWALL_RULE_NAME)" --format="value(name)" | grep -q "$FIREWALL_RULE_NAME" && gcloud compute firewall-rules delete "$FIREWALL_RULE_NAME" --quiet --project "$PROJECT_ID" || echo "Firewall rule $FIREWALL_RULE_NAME does not exist."

      - name: Delete GKE cluster
        if: always()
        run: |-
          gcloud container clusters delete ${{ env.CLUSTER_NAME }} --zone ${{ env.GKE_ZONE }} --quiet

  slack_notify:
    name: Slack Notify
    needs: ["gke-e2e-tests", "delete-cluster"]
    if: always() && ( needs.gke-e2e-tests.result != 'success' || needs.delete-cluster.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            SLACK_WEBHOOK_URL,CN/SLACK_WEBHOOK_URL

      - uses: 8398a7/action-slack@v3
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
