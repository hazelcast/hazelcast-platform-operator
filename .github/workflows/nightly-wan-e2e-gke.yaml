name: (E2E) Wan Replication Tests on GKE
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

env:
  GCP_PROJECT_ID: hazelcast-33
  GKE_ZONE: us-east1-b
  NUMBER_OF_NODES: 3
  GCP_NETWORK: operator-test-network
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator

jobs:
  get-image:
    name: Get Image
    runs-on: ubuntu-latest
    outputs:
      IMG: ${{ steps.get-image-tag.outputs.IMG }}
    steps:
      - uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.4.1
        with:
          install: true

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Generate Image Name
        id: get-image-tag
        run: |
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            echo "IMG=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen):5d" >> $GITHUB_OUTPUT
          else
            IMG=hazelcast/hazelcast-platform-operator:latest-snapshot
            echo "IMG=${IMG}" >> $GITHUB_OUTPUT
          fi

      - name: Build Image
        if: github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{github.sha}}
            pardotID=dockerhub
          file: Dockerfile
          push: true
          tags: ${{ steps.get-image-tag.outputs.IMG }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d

  create-gke-cluster:
    name: Create GKE Cluster
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        cluster: ["src", "trg"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Golang Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Authenticate To ${{ matrix.cluster }} GCP Cluster
        uses: 'google-github-actions/auth@v1.1.1'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Create ${{ matrix.cluster }} GKE Cluster
        id: set-cluster-data
        run: |-
          gcloud container clusters create ${{ matrix.cluster }}-wan-cluster-${{ github.run_number }} \
            --zone=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --network=${{ env.GCP_NETWORK }} \
            --machine-type=n1-standard-16 \
            --num-nodes=${{ env.NUMBER_OF_NODES }}
          sleep 20

  grafana-setup:
    needs: [ create-gke-cluster ]
    uses: ./.github/workflows/grafana-agent.yaml
    secrets: inherit
    strategy:
      matrix:
        cluster: [ "src", "trg" ]
    with:
      cluster_name: ${{ matrix.cluster }}-wan-cluster-${{ github.run_number }}
      cluster_type: gke-wan
      gh_run_id: ${{ github.run_id }}
      gh_run_number: ${{ github.run_number }}
      gh_sha: ${{ github.sha }}
      namespaces: ${{ matrix.cluster }}-ns

  deploy-operator:
    name: Deploy Hazelcast Operator
    needs: [create-gke-cluster, grafana-setup, get-image]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        cluster: ["src", "trg"]
        namespace: ["src-ns", "trg-ns"]
        exclude:
          - cluster: trg
            namespace: src-ns
    env:
      IMG: ${{ needs.get-image.outputs.IMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"

      - name: Authenticate To ${{ matrix.cluster }} GCP Cluster
        uses: 'google-github-actions/auth@v1.1.1'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Connect To The ${{ matrix.cluster }} GKE Cluster
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ matrix.cluster }}-wan-cluster-${{ github.run_number }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GKE_SA_KEY }}

      - name: Deploy CRDs
        if: matrix.namespace == 'trg-ns'
        run: make install-crds

      - name: Deploy Operator To ${{ matrix.cluster }} GKE Cluster and ${{ matrix.namespace }} namespace
        run: |
          kubectl create namespace ${{ matrix.namespace }}
          kubectl config set-context --current --namespace=${{ matrix.namespace }}
          DEPLOY_NAME=${{ matrix.namespace }}-hazelcast-platform-operator
          echo "DEPLOY_NAME=${DEPLOY_NAME}" >> $GITHUB_ENV
          make install-operator IMG=$IMG NAMESPACE=${{ matrix.namespace }} RELEASE_NAME=${{ matrix.namespace }}
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create Secret On ${{ matrix.cluster }} Cluster and ${{ matrix.namespace }} namespace
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ matrix.namespace }} \
            --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

  wan-gke-tests:
    name: Run Wan Test
    runs-on: ubuntu-22.04
    needs: [deploy-operator]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v1.1.1'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set Cluster And Context Name Variables
        run: |
          FIRST_CLUSTER_NAME="src-wan-cluster-${{ github.run_number }}"
          echo "FIRST_CLUSTER_NAME=${FIRST_CLUSTER_NAME}" >> $GITHUB_ENV
          SECOND_CLUSTER_NAME="trg-wan-cluster-${{ github.run_number }}"
          echo "SECOND_CLUSTER_NAME=${SECOND_CLUSTER_NAME}" >> $GITHUB_ENV
          FIRST_CONTEXT_NAME="gke_${{ env.GCP_PROJECT_ID }}_${{ env.GKE_ZONE }}_${FIRST_CLUSTER_NAME}"
          echo "FIRST_CONTEXT_NAME=${FIRST_CONTEXT_NAME}" >> $GITHUB_ENV
          SECOND_CONTEXT_NAME="gke_${{ env.GCP_PROJECT_ID }}_${{ env.GKE_ZONE }}_${SECOND_CLUSTER_NAME}"
          echo "SECOND_CONTEXT_NAME=${SECOND_CONTEXT_NAME}" >> $GITHUB_ENV

          echo "sourceNamespace="src-ns"" >> $GITHUB_ENV
          echo "targetNamespace="trg-ns"" >> $GITHUB_ENV

      - name: Connect To The Second GKE Cluster
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: trg-wan-cluster-${{ github.run_number }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Get Second KUBECONFIG
        run: |
          echo "SECOND_KUBECONFIG=${{ env.KUBECONFIG }}" >> $GITHUB_ENV

      - name: Connect To The First GKE Cluster
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: src-wan-cluster-${{ github.run_number }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Get First KUBECONFIG
        run: |
          echo "FIRST_KUBECONFIG=${{ env.KUBECONFIG }}" >> $GITHUB_ENV

      - name: Merge KUBECONFIG Files
        run: |
          KUBECONFIG="${{ env.FIRST_KUBECONFIG }}:${{ env.SECOND_KUBECONFIG }}" kubectl config view --raw > ${GITHUB_WORKSPACE}/kubeconfig
          echo "KUBECONFIG="${GITHUB_WORKSPACE}/kubeconfig"" >> $GITHUB_ENV

      - name: Run Wan Test
        run: |-
          make test-e2e NAMESPACE=src-ns RELEASE_NAME=src-ns E2E_TEST_SUITE=hz_wan_slow REPORT_SUFFIX=ee_01 WORKFLOW_ID=wan

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-wan
          path: allure-results/wan/

  report-generation:
    needs: ["create-gke-cluster", "wan-gke-tests"]
    if: always() && (needs.wan-gke-tests.result == 'success' || needs.wan-gke-tests.result == 'failure')
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: wan
      CLUSTER_NAME: src-wan-cluster-${{ github.run_number }}

  cleanup-namespaces:
    name: Cleanup Namespaces
    if: always()
    needs: [create-gke-cluster, wan-gke-tests]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        cluster: ["src", "trg"]
        namespace: ["src-ns", "trg-ns"]
        exclude:
          - cluster: trg
            namespace: src-ns
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate To GCP
        uses: 'google-github-actions/auth@v1.1.1'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Connect To ${{ matrix.cluster }} GCP Cluster
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ matrix.cluster }}-wan-cluster-${{ github.run_number }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Clean up after Tests on ${{ matrix.cluster }} Cluster and ${{ matrix.namespace }} Namespace
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${{ matrix.namespace }} RELEASE_NAME=${{ matrix.namespace }}

      - name: Clean up Grafana namespace
        if: always()
        timeout-minutes: 10
        run: |
          source .github/scripts/utils.sh
          cleanup_namespace grafana
          cleanup_namespace ${{ matrix.namespace }}

  delete-gke-cluster:
    name: Delete GKE Cluster
    if: always()
    needs: [create-gke-cluster, wan-gke-tests, cleanup-namespaces]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        cluster: ["src", "trg"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate To GCP
        uses: 'google-github-actions/auth@v1.1.1'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Connect To ${{ matrix.cluster }} GCP Cluster
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ matrix.cluster }}-wan-cluster-${{ github.run_number }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Delete ${{ matrix.cluster }} GKE Cluster
        if: always()
        run: |-
          gcloud container clusters delete ${{ matrix.cluster }}-wan-cluster-${{ github.run_number }} \
           --zone ${{ env.GKE_ZONE }} \
           --quiet