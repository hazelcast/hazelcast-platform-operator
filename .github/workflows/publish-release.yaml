name: (4) Publish Release
on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string

env:
  OPERATOR_NAME: "hazelcast-platform-operator"
  RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  PFLT_PYXIS_API_TOKEN: ${{ secrets.RHEL_API_KEY }}
  PUBLISH_TIMEOUT_IN_MINS: "60"
  GRADE_CHECK_TIMEOUT_IN_MINS: "10"

jobs:
  publish_docker_image:
    name: Publish Release Image to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.set-outputs.outputs.RELEASE_VERSION }}
      IMAGE_NAME: ${{ steps.set-outputs.outputs.IMAGE_NAME }}
      IMAGE_DIGEST: ${{ steps.push-operator-image.outputs.IMAGE_DIGEST }}
      CURRENT_LATEST_TAG: ${{ steps.get-current-latest-tag.outputs.CURRENT_LATEST_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set Release Version
        id: set-outputs
        run: |
          IMAGE_NAME=docker.io/hazelcast/${OPERATOR_NAME}:${RELEASE_VERSION}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Get the Current Latest Tag
        id: get-current-latest-tag
        run: |
          token=$(curl --fail -L -s -X POST 'https://hub.docker.com/v2/users/login' \
          -H 'Content-Type: application/json' \
          --data-raw '{
            "username": "${{ secrets.DOCKERHUB_USERNAME }}",
            "password": "${{ secrets.DOCKERHUB_PASSWORD }}"
          }'| jq -r '.token')

          CURRENT_LATEST_TAG=$(curl --fail -L -s -X GET 'https://hub.docker.com/v2/namespaces/hazelcast/repositories/hazelcast-platform-operator/images?status=active&currently_tagged=true&page_size=100' \
          -H "Authorization: Bearer $token" | jq -r  '.results[] | select((.tags | length == 2) and .tags[].tag =="latest") | select(.tags[1].is_current == true) | .tags[].tag | select(. !="latest")')
          echo "CURRENT_LATEST_TAG=${CURRENT_LATEST_TAG}" >> $GITHUB_ENV
          echo "CURRENT_LATEST_TAG=${CURRENT_LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Build Operator Image
        run: |
          make docker-build-ci IMG=${IMAGE_NAME} VERSION=${RELEASE_VERSION}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Operator Image
        id: push-operator-image
        run: |
          make docker-push docker-push-latest IMG="${IMAGE_NAME}"
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_NAME} | cut -d'@' -f2)
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_ENV
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT

  publish_image_to_redhat:
    name: Certify and Publish Container Image to Red Hat
    needs: publish_docker_image
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ${{ needs.publish_docker_image.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Preflight
        id: setup-tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Test and Submit Container Results to Red Hat
        run: |
          echo "Submit test container results to Red Hat"
          podman login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }} index.docker.io --authfile /home/runner/.docker/config.json

          preflight check container index.$IMAGE_NAME \
          --submit \
          --docker-config=/home/runner/.docker/config.json \
          --certification-project-id=$PROJECT_ID
          grep -E -q "Preflight result: PASSED\"( |$)" preflight.log || exit 1
          CERT_IMAGE_ID=$(cat preflight.log | grep "The container's image id is:" | awk '{print $8}' | cut -d '.' -f1)
          echo "CERT_IMAGE_ID=${CERT_IMAGE_ID}" >> $GITHUB_ENV

      - name: Publish the Hazelcast-Platform-Operator Image
        run: |
          source .github/scripts/utils.sh
          checking_image_grade "$PROJECT_ID" "$RELEASE_VERSION" "$PFLT_PYXIS_API_TOKEN" "$GRADE_CHECK_TIMEOUT_IN_MINS"
          wait_for_container_publish "$PROJECT_ID" "$RELEASE_VERSION" "$PFLT_PYXIS_API_TOKEN" "$PUBLISH_TIMEOUT_IN_MINS"

      - name: Sync Latest Image
        run: |
          source .github/scripts/utils.sh
          sync_certificated_image_tags "$PROJECT_ID" "$CERT_IMAGE_ID" "$PFLT_PYXIS_API_TOKEN"

  redhat_certified_operator_release:
    name: Create a PR in 'certified-operators' Repository
    runs-on: ubuntu-latest
    needs: ['publish_docker_image', 'publish_image_to_redhat']
    env:
      REPO_NAME: certified-operators
      REPO_OWNER: redhat-openshift-ecosystem
      RELEASE_VERSION: ${{ needs.publish_docker_image.outputs.RELEASE_VERSION }}
      IMAGE_NAME: ${{ needs.publish_docker_image.outputs.IMAGE_NAME }}
      IMAGE_DIGEST: ${{ needs.publish_docker_image.outputs.IMAGE_DIGEST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Red Hat Bundle
        run: |
          IMAGE_NAME_DIGEST=docker.io/hazelcast/${OPERATOR_NAME}@${IMAGE_DIGEST}
          make bundle IMG=${IMAGE_NAME_DIGEST} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: v4.8
            operators.operatorframework.io.bundle.channel.default.v1: alpha
          EOF

      - name: Validate Bundle for OCP
        run: |
          make bundle-ocp-validate

      - name: Checkout to devOpsHelm
        uses: actions/checkout@v3
        with:
          repository: devOpsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main
          git push origin main

      - name: Set Bundle Release Version
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}

          # Copy bundle files under new version of the operator
          git checkout -b $BRANCH_NAME
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/* operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          # Commit and push changes
          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ secrets.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title \
          "operator ${OPERATOR_NAME} (${BUNDLE_RELEASE_VERSION})" --body "" --repo ${REPO_OWNER}/${REPO_NAME}

  operatorhub_release:
    name: Create a PR in
    runs-on: ubuntu-latest
    needs: ['publish_docker_image', 'publish_image_to_redhat']
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo-name: community-operators
            repo-owner: k8s-operatorhub

          - repo-name: community-operators-prod
            repo-owner: redhat-openshift-ecosystem
    env:
      REPO_NAME: ${{ matrix.repo-name }}
      REPO_OWNER: ${{ matrix.repo-owner }}
      RELEASE_VERSION: ${{ needs.publish_docker_image.outputs.RELEASE_VERSION }}
      IMAGE_NAME: ${{ needs.publish_docker_image.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Bundle
        run: |
          make bundle IMG=${IMAGE_NAME} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: v4.8
          EOF

      - name: Checkout to devOpsHelm/${{ env.REPO_NAME }}
        uses: actions/checkout@v3
        with:
          repository: devopsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME}}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main
          git push origin main

      - name: Set Bundle Release Version
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME}}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}

          # Copy bundle files under new version of the operator
          git checkout -b $BRANCH_NAME
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/* operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          # Commit and push changes
          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ secrets.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title "operator ${OPERATOR_NAME} (${BUNDLE_RELEASE_VERSION})" \
            --body "" --repo ${REPO_OWNER}/${REPO_NAME}

  revert_changes:
    name: Revert Release Changes
    needs: ['publish_docker_image', 'publish_image_to_redhat']
    if: always() && (needs.publish_docker_image.result == 'failure' || needs.publish_image_to_redhat.result == 'failure')
    runs-on: ubuntu-latest
    env:
      CURRENT_LATEST_TAG: ${{ needs.publish_docker_image.outputs.CURRENT_LATEST_TAG }}
      IMAGE_DIGEST: ${{ needs.publish_docker_image.outputs.IMAGE_DIGEST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Removing Published Docker Image
        run: |
          auth_token=$(curl --fail -L -s -X POST 'https://hub.docker.com/v2/users/login' \
          -H 'Content-Type: application/json' \
          --data-raw '{
            "username": "${{ secrets.DOCKERHUB_USERNAME }}",
            "password": "${{ secrets.DOCKERHUB_PASSWORD }}"
          }'| jq -r '.token')

          curl --fail -L -s -X POST 'https://hub.docker.com/v2/namespaces/hazelcast/delete-images' \
          -H "Authorization: Bearer $auth_token" \
          -H 'Content-Type: application/json' \
          --data-raw '{
              "manifests": [
                  {
                      "repository": "${{ env.OPERATOR_NAME }}",
                      "digest": "${{ env.IMAGE_DIGEST }}"
                  }
              ],
              "ignore_warnings": [
                  {
                      "repository": "${{ env.OPERATOR_NAME }}",
                      "digest": "${{ env.IMAGE_DIGEST }}",
                      "warning": "is_active"
                  },
                  {
                      "repository": "${{ env.OPERATOR_NAME }}",
                      "digest": "${{ env.IMAGE_DIGEST }}",
                      "warning": "current_tag",
                      "tags": [
                          "${{ env.RELEASE_VERSION }}",
                          "latest"
                      ]
                  }
              ]
          }'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Making Previous Docker Image Tag As 'latest'
        run: |
          docker pull docker.io/hazelcast/${OPERATOR_NAME}:${CURRENT_LATEST_TAG}
          make docker-push-latest IMG="docker.io/hazelcast/${OPERATOR_NAME}:${CURRENT_LATEST_TAG}"

      - name: Removing Release Tag
        run: |
          git push --delete origin v${RELEASE_VERSION}

  slack_notify:
    name: Slack Notify
    needs: ['publish_docker_image', 'publish_image_to_redhat', 'operatorhub_release', 'redhat_certified_operator_release' ]
    if: needs.operatorhub_release.result != 'success' && needs.redhat_certified_operator_release.result != 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@a189acbf0b7ea434558662ae25a0de71df69a435
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}