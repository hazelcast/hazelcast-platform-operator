name: (4) Publish Release
on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string
      PREFLIGHT_VERSION:
        description: "preflight tool version"
        required: true
        type: string
    secrets:
      PFLT_PYXIS_API_TOKEN:
        description: "An API Key can be created in Red Hat Partner Connect at the following URL: https://connect.redhat.com/account/api-keys"
        required: true
      DOCKERHUB_USERNAME:
        description: "Docker Hub registry username"
        required: true
      DOCKERHUB_PASSWORD:
        description: "Docker Hub registry password"
        required: true

env:
  OPERATOR_NAME: "hazelcast-platform-operator"
  RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  PFLT_PYXIS_API_TOKEN: ${{ secrets.PFLT_PYXIS_API_TOKEN }}
  PFLT_DOCKERCONFIG: /home/runner/.docker/config.json
  PREFLIGHT_VERSION: ${{ inputs.PREFLIGHT_VERSION }}
  TIMEOUT_IN_MINS: "60"

jobs:
  publish_docker_image:
    name: Publish Release to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.set-outputs.outputs.RELEASE_VERSION }}
      IMAGE_NAME: ${{ steps.set-outputs.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Tools
        uses: ./.github/actions/operator-tests

      - name: Set Release Version
        id: set-outputs
        run: |
          IMAGE_NAME=hazelcast/${OPERATOR_NAME}:${RELEASE_VERSION}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"
          echo "::set-output name=IMAGE_NAME::${IMAGE_NAME}"

      - name: Build Operator Image
        run: |
          make docker-build-ci IMG=${IMAGE_NAME} VERSION=${RELEASE_VERSION}

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | \
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Operator Image
        run: make docker-push docker-push-latest IMG="${IMAGE_NAME}"

      - name: Upload Bundle to Jfrog
        run: |
          make generate-bundle-yaml VERSION=${RELEASE_VERSION}

          curl -H "Authorization: Bearer ${{ secrets.JFROG_TOKEN }}" \
               -X PUT "https://hazelcast.jfrog.io/artifactory/operator/bundle-latest.yaml" \
               -T bundle.yaml

          curl -H "Authorization: Bearer ${{ secrets.JFROG_TOKEN }}" \
               -X PUT "https://hazelcast.jfrog.io/artifactory/operator/bundle-${RELEASE_VERSION}.yaml" \
               -T bundle.yaml

  publish_redhat_image:
    name: Build and Publish Red Hat Image
    needs: publish_docker_image
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04
    env:
      IMAGE_NAME: ${{ needs.publish_docker_image.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Preflight and Get Certification Project ID
        id: setup-tools
        uses: ./.github/actions/operator-tests
        with:
          PFLT_PYXIS_API_TOKEN: $PFLT_PYXIS_API_TOKEN
          PREFLIGHT_VERSION: $PREFLIGHT_VERSION

      - name: Test and Submit Container Results to Red Hat [prod]
        run: |
          echo "Submit test container results to Red Hat"
          preflight check container $IMAGE_NAME \
          --submit \
          --certification-project-id=$PROJECT_ID
          grep -E -q "Preflight result: PASSED\"( |$)" preflight.log || exit 1

      - name: Publish the Hazelcast-Platform-Operator Image
        run: |
          source .github/scripts/publish-rhel.sh
          publish_the_image "$PROJECT_ID" "$RELEASE_VERSION" "$PFLT_PYXIS_API_TOKEN"
          wait_for_container_publish "$PROJECT_ID" "$RELEASE_VERSION" "$PFLT_PYXIS_API_TOKEN" "$TIMEOUT_IN_MINS"

  redhat_bundle_release:
    name: Create a PR in 'certified-operators' Repository
    runs-on: ubuntu-latest
    needs: publish_docker_image
    env:
      REPO_NAME: certified-operators
      REPO_OWNER: redhat-openshift-ecosystem
      RELEASE_VERSION: ${{ needs.publish_docker_image.outputs.RELEASE_VERSION }}
      IMAGE_NAME: ${{ needs.publish_docker_image.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Tools
        id: setup
        uses: ./.github/actions/operator-tests

      - name: Build Red Hat Bundle
        run: |
          make bundle IMG=${IMAGE_NAME} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: "v4.6"
            operators.operatorframework.io.bundle.channel.default.v1: alpha
          EOF

      - name: Validate Bundle for OCP
        run: |
          make bundle-ocp-validate

      - name: Checkout to devOpsHelm
        uses: actions/checkout@v3
        with:
          repository: devOpsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main
          git push origin main

      - name: Set Bundle Release Version
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}

          # Copy bundle files under new version of the operator
          git checkout -b $BRANCH_NAME
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/* operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          # Commit and push changes
          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ secrets.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title \
          "operator ${OPERATOR_NAME} (${BUNDLE_RELEASE_VERSION})" --body "" --repo ${REPO_OWNER}/${REPO_NAME}

  operatorhub_release:
    name: Create a PR in
    runs-on: ubuntu-latest
    needs: publish_docker_image
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo-name: community-operators
            repo-owner: k8s-operatorhub

          - repo-name: community-operators-prod
            repo-owner: redhat-openshift-ecosystem
    env:
      REPO_NAME: ${{ matrix.repo-name }}
      REPO_OWNER: ${{ matrix.repo-owner }}
      RELEASE_VERSION: ${{ needs.publish_docker_image.outputs.RELEASE_VERSION }}
      IMAGE_NAME: ${{ needs.publish_docker_image.outputs.IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Tools
        id: setup
        uses: ./.github/actions/operator-tests

      - name: Build Bundle
        run: |
          make bundle IMG=${IMAGE_NAME} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: "v4.6"
          EOF

      - name: Checkout to devOpsHelm/${{ env.REPO_NAME }}
        uses: actions/checkout@v3
        with:
          repository: devopsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME}}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main
          git push origin main

      - name: Set Bundle Release Version
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME}}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}

          # Copy bundle files under new version of the operator
          git checkout -b $BRANCH_NAME
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/* operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          # Commit and push changes
          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ secrets.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title "operator ${OPERATOR_NAME} (${BUNDLE_RELEASE_VERSION})" \
            --body "" --repo ${REPO_OWNER}/${REPO_NAME}

  slack_notify:
    name: Slack Notify
    needs: ['publish_docker_image', 'publish_redhat_image', 'operatorhub_release', 'redhat_bundle_release' ]
    if: needs.operatorhub_release.result != 'success' && needs.redhat_bundle_release.result != 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@f3635935f58910a6d6951b73efe9037c960c8c04
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}