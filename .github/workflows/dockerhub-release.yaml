name: Publish Docker Hub Release
on:
  push:
    tags:
      - "v*"

env:
  OPERATOR_NAME: "hazelcast-platform-operator"

jobs:
  publish_image:
    name: Publish Release to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.set-outputs.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Release Version
        id: set-outputs
        run: |
          RELEASE_VERSION=${GITHUB_REF:11}
          IMAGE_NAME=hazelcast/${OPERATOR_NAME}:${RELEASE_VERSION}
          
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Cache Golang dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Operator Image
        run: make docker-build IMG="${IMAGE_NAME}" VERSION="${RELEASE_VERSION}"

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Operator Image
        run: make docker-push IMG="${IMAGE_NAME}"

      - name: Upload Bundle to Jfrog
        run: |
          make generate-bundle-yaml VERSION=${RELEASE_VERSION}

          curl -H "Authorization: Bearer ${{ secrets.JFROG_TOKEN }}" \
               -X PUT "https://hazelcast.jfrog.io/artifactory/operator/bundle-latest.yaml" \
               -T bundle.yaml

          curl -H "Authorization: Bearer ${{ secrets.JFROG_TOKEN }}" \
               -X PUT "https://hazelcast.jfrog.io/artifactory/operator/bundle-${RELEASE_VERSION}.yaml" \
               -T bundle.yaml

  operatorhub_release:
    name: Create a PR in 
    runs-on: ubuntu-latest
    needs: publish_image
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo-name: community-operators
            repo-owner: k8s-operatorhub

          - repo-name: community-operators-prod
            repo-owner: redhat-openshift-ecosystem
    env:
      REPO_NAME: ${{ matrix.repo-name }}
      REPO_OWNER: ${{ matrix.repo-owner }}
      RELEASE_VERSION: ${{ needs.publish_image.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Bundle
        run: |
          IMAGE_NAME=hazelcast/${OPERATOR_NAME}:${RELEASE_VERSION}

          make bundle IMG=${IMAGE_NAME} VERSION=${RELEASE_VERSION}
          cat >> ./bundle/metadata/annotations.yaml <<EOF
            # OpenShift annotations.
            com.redhat.openshift.versions: "v4.6"
          EOF

      - name: Checkout to devOpsHelm/${{ env.REPO_NAME }}
        uses: actions/checkout@v2
        with:
          repository: devopsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME}}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main 
          git push origin main

      - name: Set Bundle Release Version
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME}}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${RELEASE_VERSION}-${{ github.run_id }}
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV


          # Copy bundle files under new version of the operator
          git checkout -b $BRANCH_NAME
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/manifests ../bundle/metadata operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          # Commit and push changes
          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR 
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ secrets.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title "operator ${OPERATOR_NAME} (${BUNDLE_RELEASE_VERSION})" --body "" --repo ${REPO_OWNER}/${REPO_NAME}
