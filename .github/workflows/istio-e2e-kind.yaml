name: Istio E2E tests on Kind

on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: "0 9 */3 * *"

jobs:
  istio-e2e-tests:
    name: Run e2e tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        edition: [ "os","ee" ]
    env:
      NAMESPACE: istio-test-operator-${{ matrix.edition }}
      NAME_PREFIX: istio-${{ matrix.edition }}-${{ github.run_id }}-
      CLUSTER_NAME: kind
      E2E_TEST_EXCLUDED_SUITE: hz_expose_externally
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create Kind Config
        run: |
          cat <<EOT >> ./kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          - role: worker
          - role: worker
          - role: worker
          EOT

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.3.0
        with:
          config: ./kind-config.yaml
          cluster_name: ${{ env.CLUSTER_NAME }}

      - name: Install Grafana Agent
        env:
          CLUSTER_TYPE: kind
          GH_RUN_ID: ${{ github.run_id }}
          GH_RUN_NUMBER: ${{ github.run_number }}
          GH_SHA: ${{ github.sha }}
          GRAFANA_REMOTE_WRITE_URL: ${{ secrets.GRAFANA_REMOTE_WRITE_URL }}
          LOKI_USERNAME: ${{ secrets.LOKI_USERNAME }}
          LOKI_PASSWORD: ${{ secrets.LOKI_PASSWORD }}
          GRAFANA_PROM_REMOTE_WRITE_URL: ${{ secrets.GRAFANA_PROM_REMOTE_WRITE_URL }}
          GRAFANA_PROM_USERNAME: ${{ secrets.GRAFANA_PROM_USERNAME }}
          GRAFANA_PROM_PASSWORD: ${{ secrets.GRAFANA_PROM_PASSWORD }}
          NAMESPACES: ${{ env.NAMESPACE }}
          GRAFANA_NS: grafana
        run: |
          kubectl create namespace ${GRAFANA_NS}
          NAMESPACE=${GRAFANA_NS} envsubst < .github/grafana/metrics-cm.yaml | /bin/sh -c 'kubectl apply -f -'
          NAMESPACE=${GRAFANA_NS} envsubst < .github/grafana/logs-cm.yaml | /bin/sh -c 'kubectl apply -f -'
          MANIFEST_URL=https://raw.githubusercontent.com/grafana/agent/v0.27.1/production/kubernetes/agent-bare.yaml NAMESPACE=${GRAFANA_NS} /bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/grafana/agent/v0.27.1/production/kubernetes/install-bare.sh)" | kubectl apply -f -
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts && helm repo update && \
          helm install ksm prometheus-community/kube-state-metrics --set image.tag=v2.4.2 -n ${GRAFANA_NS}
          MANIFEST_URL=https://raw.githubusercontent.com/grafana/agent/v0.27.1/production/kubernetes/agent-loki.yaml NAMESPACE=${GRAFANA_NS} /bin/sh -c "$(curl -fsSL https://raw.githubusercontent.com/grafana/agent/v0.27.1/production/kubernetes/install-bare.sh)" | kubectl apply -f -

      - name: Install metallb
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: |
            kubectl create namespace ${NAMESPACE}
            kubectl config set-context --current --namespace=$NAMESPACE
            kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
            kubectl wait --for=condition=ready --timeout=60s -n metallb-system pod -l app=metallb
            HOST_MIN=$(docker network inspect -f '{{json .IPAM.Config}}' kind | jq -r '.[0].Subnet' |  sed  -n 's/.0.0.16/.255.200/p')
            HOST_MAX=$(docker network inspect -f '{{json .IPAM.Config}}' kind | jq -r '.[0].Subnet' |  sed  -n 's/.0.0.16/.255.250/p')
            IP_RANGE=$HOST_MIN-$HOST_MAX
            cat <<EOF | kubectl apply -f -
            apiVersion: metallb.io/v1beta1
            kind: IPAddressPool
            metadata:
              name: kind-pool
              namespace: metallb-system
            spec:
              addresses:
              - $IP_RANGE
            ---
            apiVersion: metallb.io/v1beta1
            kind: L2Advertisement
            metadata:
              name: l2
              namespace: metallb-system
            spec:
              ipAddressPools:
              - kind-pool
            EOF

      - name: Install Istio
        run: |
          curl -sL https://raw.githubusercontent.com/istio/istio/release-1.16/release/downloadIstioCtl.sh | sh -
          export PATH=$HOME/.istioctl/bin:$PATH
          istioctl install --set profile=demo -y
          kubectl label namespace ${{ env.NAMESPACE }} istio-injection=enabled

      - name: Create Secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
             --namespace ${{ env.NAMESPACE }} \
             --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}

      - name: Create Secret For Both OS and EE Tests
        run: |
          kubectl create secret generic br-secret-gcp \
          --namespace ${{ env.NAMESPACE }} \
          --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

      - name: Build And Push Image
        run: |
          IMG=hazelcast/hazelcast-platform-operator:latest-snapshot
          docker pull $IMG
          kind load docker-image $IMG --name ${{ env.CLUSTER_NAME }}
          echo "IMG=${IMG}" >> $GITHUB_ENV

      - name: Deploy Operator to Istio Cluster
        run: |
          DEPLOY_NAME=${NAME_PREFIX}platform-operator
          make deploy IMG=$IMG NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Run Hazelcast E2E Tests
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
          os) GO_TEST_FLAGS=-ee=false;;
          ee) GO_TEST_FLAGS=-ee=true;;
          *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX WORKFLOW_ID=istio E2E_TEST_EXCLUDED_SUITE=$E2E_TEST_EXCLUDED_SUITE

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-istio
          path: allure-results/istio/

  report-generation:
    needs: [ "istio-e2e-tests" ]
    if: always() && needs.kind-e2e-tests.result != 'cancelled'
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: istio
      CLUSTER_NAME: kind

  slack_notify:
    name: Slack Notify
    needs: [ "istio-e2e-tests" ]
    if: always() && ( needs.istio-e2e-tests.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@a189acbf0b7ea434558662ae25a0de71df69a435
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}