name: (E2E) AWS Tests
on:
  workflow_dispatch:
  workflow_call:

env:
  AWS_REGION: us-east-1
  DELETE_EKS_STACK_TIMEOUT_IN_MINS: "15"
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator

jobs:
  prepare-env:
    name: Create EKS cluster
    runs-on: ubuntu-latest
    outputs:
      CLUSTER_NAME: ${{ steps.create-cluster.outputs.CLUSTER_NAME }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |-
          curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Create EKS cluster
        id: create-cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${{ github.run_number }}"
          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          eksctl create cluster --name "${CLUSTER_NAME}" \
            --region=${AWS_REGION} \
            --zones ${AWS_REGION}a \
            --zones ${AWS_REGION}c \
            --version auto \
            --with-oidc \
            --without-nodegroup

          eksctl create nodegroup --cluster "${CLUSTER_NAME}" \
            --name node-group-1 \
            --node-type t3.medium \
            --nodes 3 \
            --managed

          eksctl create addon --name aws-ebs-csi-driver --cluster "${CLUSTER_NAME}"

  grafana-setup:
    needs: [ prepare-env ]
    uses: ./.github/workflows/grafana-agent.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.prepare-env.outputs.CLUSTER_NAME }}
      cluster_type: eks
      gh_run_id: ${{ github.run_id }}
      gh_run_number: ${{ github.run_number }}
      gh_sha: ${{ github.sha }}
      namespaces: "test-operator-os, test-operator-ee"

  get-image:
    name: Get Image
    runs-on: ubuntu-latest
    outputs:
      IMG: ${{ steps.get-image-tag.outputs.IMG }}
    steps:
      - uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.10.0
        with:
          install: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Generate Image Name
        id: get-image-tag
        run: |
          echo "IMG=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen):5d" >> $GITHUB_OUTPUT

      - name: Build Image
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{github.sha}}
            pardotID=dockerhub
          file: Dockerfile
          push: true
          tags: ${{ steps.get-image-tag.outputs.IMG }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d

  eks-e2e-tests:
    name: Run e2e test on EKS
    runs-on: ubuntu-latest
    needs: ["prepare-env", "grafana-setup", "get-image"]
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    env:
      NAMESPACE: test-operator-${{ matrix.edition }}
      RELEASE_NAME: hp-${{ matrix.edition }}-${{ github.run_id }}
      IMG: ${{ needs.get-image.outputs.IMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: ">=1.19.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY
            HZ_LICENSE_KEY,CN/HZ_LICENSE_KEY
            AZURE_STORAGE_KEY,CN/AZURE_STORAGE_KEY

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Update kubeconfig
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${{ github.run_number }}"
          aws eks update-kubeconfig --name "${CLUSTER_NAME}"

      - name: Authenticate to GAR
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Deploy Operator to EKS
        run: |
          make install-crds
          kubectl create namespace ${NAMESPACE}
          kubectl config set-context --current --namespace=${NAMESPACE}

          DEPLOY_NAME=${RELEASE_NAME}-hazelcast-platform-operator
          make install-operator NAMESPACE=${NAMESPACE} IMG=${IMG} RELEASE_NAME=$RELEASE_NAME
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${NAMESPACE} --from-literal=license-key=${{ env.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ env.AZURE_STORAGE_KEY }}

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ env.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests on EKS
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=${NAMESPACE} RELEASE_NAME=${RELEASE_NAME} REPORT_SUFFIX=${{ matrix.edition }}_01 WORKFLOW_ID=eks

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}
          source .github/scripts/utils.sh
          wait_for_elb_deleted $DELETE_EKS_STACK_TIMEOUT_IN_MINS

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-eks
          path: allure-results/eks/

  update-test-run-status-badge:
    runs-on: ubuntu-latest
    needs: eks-e2e-tests
    if: always() && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GIST_CREATION_TOKEN,CN/GIST_CREATION_TOKEN
            TEST_STATUSES_GIST_ID,CN/TEST_STATUSES_GIST_ID

      - name: Update Status Badge
        run: |
          source .github/scripts/utils.sh
          update_status_badges ${{ github.run_id }} ${{ env.TEST_STATUSES_GIST_ID }} ${{ env.GIST_CREATION_TOKEN }}

  report-generation:
    needs: ["prepare-env", "eks-e2e-tests"]
    if: always() && (needs.eks-e2e-tests.result == 'success' || needs.eks-e2e-tests.result == 'failure')
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: eks
      CLUSTER_NAME: ${{ needs.prepare-env.outputs.CLUSTER_NAME }}

  cleanup-namespaces:
    if: always()
    needs: ["prepare-env", "eks-e2e-tests"]
    uses: ./.github/workflows/cleanup-namespace.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.prepare-env.outputs.CLUSTER_NAME }}
      cluster_type: eks
      namespaces: "test-operator-os,test-operator-ee,grafana"

  delete-cluster:
    name: Delete EKS cluster
    runs-on: ubuntu-latest
    if: always()
    needs: ["prepare-env", "eks-e2e-tests", "cleanup-namespaces"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |-
          curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Delete EKS cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${{ github.run_number }}"
          source .github/scripts/utils.sh
          wait_for_eks_stack_deleted eksctl-$CLUSTER_NAME $DELETE_EKS_STACK_TIMEOUT_IN_MINS
          clean_open_id_connect_providers ${{ env.AWS_REGION }} $CLUSTER_NAME

  slack_notify:
    name: Slack Notify
    needs: ["eks-e2e-tests", "delete-cluster"]
    if: always() && ( needs.eks-e2e-tests.result != 'success' || needs.delete-cluster.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            SLACK_WEBHOOK_URL,CN/SLACK_WEBHOOK_URL

      - uses: 8398a7/action-slack@v3
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
