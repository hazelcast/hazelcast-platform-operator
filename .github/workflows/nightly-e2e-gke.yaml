name: Nightly E2E tests on GKE
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

env:
  GCP_PROJECT_ID: hazelcast-33
  GKE_ZONE: europe-west1-b
  NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}

jobs:
  create-gke-cluster:
    name: Create GKE cluster
    runs-on: ubuntu-latest
    outputs:
      CLUSTER_NAME: ${{ steps.set-cluster-name.outputs.CLUSTER_NAME }}
    env:
      GCP_NETWORK: operator-test-network
    steps:
      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v1.0.0'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Create GKE cluster
        id: set-cluster-name
        run: |-
          CLUSTER_NAME="operator-e2e-test-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          gcloud container clusters create ${CLUSTER_NAME} \
            --zone=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --network=${{ env.GCP_NETWORK }} \
            --machine-type=n1-standard-2 \
            --num-nodes=3
          sleep 30

  new-relic-setup:
    needs: [ create-gke-cluster ]
    uses: ./.github/workflows/newrelic-gke.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      nr_cluster_name: gke-operator
      gh_run_id: ${{ github.run_id }}
      gh_run_number: ${{ github.run_number }}
      gh_sha: ${{ github.sha }}

  get-image:
    name: Get Image
    runs-on: ubuntu-latest
    outputs:
      IMG: ${{ steps.build-img.outputs.IMG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and push image to ttl.sh
        id: build-img
        run: |
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            IMG=ttl.sh/$(uuidgen):2h
            echo "IMG=${IMG}" >> $GITHUB_OUTPUT
            make docker-build-ci IMG=$IMG VERSION=${{github.sha}}
            make docker-push IMG=$IMG
          else
            IMG=hazelcast/hazelcast-platform-operator:latest-snapshot
            echo "IMG=${IMG}" >> $GITHUB_OUTPUT
          fi

  gke-e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-latest
    needs: [create-gke-cluster, new-relic-setup, get-image]
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    env:
      NAMESPACE: test-operator-nightly-${{ matrix.edition }}
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      NAME_PREFIX: hp-${{ matrix.edition }}-${{ github.run_id }}-
      IMG: ${{ needs.get-image.outputs.IMG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"

      - name: Cache Golang dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v1.0.0"
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Connect to the GKE cluster
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: Deploy Operator to GKE
        run: |
          kubectl create namespace ${NAMESPACE}
          kubectl label namespace ${NAMESPACE} newrelic.com/scrape=true
          kubectl config set-context --current --namespace=$NAMESPACE

          DEPLOY_NAME=${NAME_PREFIX}controller-manager
          echo "DEPLOY_NAME=${DEPLOY_NAME}" >> $GITHUB_ENV

          make deploy IMG=$IMG NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ env.NAMESPACE }} --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ secrets.AZURE_STORAGE_KEY }}

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ secrets.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests at GKE
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE NAME_PREFIX=$NAME_PREFIX WORKFLOW_ID=gke

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: allure-results/gke/

  report-generation:
    needs: ["gke-e2e-tests","create-gke-cluster"]
    if: always() && needs.gke-e2e-tests.result != 'cancelled'
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: gke

  delete-cluster:
    name: Delete GKE cluster
    runs-on: ubuntu-latest
    if: always()
    needs: [create-gke-cluster, gke-e2e-tests]
    env:
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
    steps:
      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v1.0.0"
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Delete GKE cluster
        if: always()
        run: |-
          gcloud container clusters delete ${{ env.CLUSTER_NAME }} --zone ${{ env.GKE_ZONE }} --quiet

  slack_notify:
    name: Slack Notify
    needs: ["gke-e2e-tests", "delete-cluster"]
    if: always() && ( needs.gke-e2e-tests.result != 'success' || needs.delete-cluster.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: 8398a7/action-slack@a189acbf0b7ea434558662ae25a0de71df69a435
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
