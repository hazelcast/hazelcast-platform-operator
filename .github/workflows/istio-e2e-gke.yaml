name: (E2E) Istio Tests on GKE
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 */3 * *"

env:
  GCP_PROJECT_ID: hazelcast-33
  GKE_ZONE: us-east1-b
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator
  AWS_REGION: us-east-1

jobs:
  create-gke-cluster:
    name: Create GKE cluster
    runs-on: ubuntu-latest
    outputs:
      CLUSTER_NAME: ${{ steps.set-cluster-name.outputs.CLUSTER_NAME }}
    env:
      GCP_NETWORK: operator-test-network
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v2.0.0'
        with:
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Create GKE cluster
        id: set-cluster-name
        run: |-
          CLUSTER_NAME="operator-istio-e2e-test-${GITHUB_SHA::8}-${{ github.run_number }}"
          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          gcloud container clusters create ${CLUSTER_NAME} \
            --zone=${{ env.GKE_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --network=${{ env.GCP_NETWORK }} \
            --machine-type=n1-standard-2 \
            --num-nodes=3
          sleep 30

  grafana-setup:
    needs: [ create-gke-cluster ]
    uses: ./.github/workflows/grafana-agent.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      cluster_type: gke-istio
      gh_run_id: ${{ github.run_id }}
      gh_run_number: ${{ github.run_number }}
      gh_sha: ${{ github.sha }}
      namespaces: "test-operator-os, test-operator-ee"

  get-image:
    name: Get Image
    runs-on: ubuntu-latest
    outputs:
      IMG: ${{ steps.get-image-tag.outputs.IMG }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          install: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GAR
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Generate Image Name
        id: get-image-tag
        run: |
          echo "IMG=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen):5d" >> $GITHUB_OUTPUT
      - name: Build Image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{github.sha}}
            pardotID=dockerhub
          file: Dockerfile
          push: true
          tags: ${{ steps.get-image-tag.outputs.IMG }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d

  gke-e2e-istio-tests:
    name: Run e2e test on GKE with Istio
    runs-on: ubuntu-latest
    needs: [create-gke-cluster, grafana-setup, get-image]
    strategy:
      fail-fast: false
      matrix:
        edition: ["os", "ee"]
    env:
      NAMESPACE: test-operator-${{ matrix.edition }}
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      RELEASE_NAME: hp-${{ matrix.edition }}-${{ github.run_id }}
      IMG: ${{ needs.get-image.outputs.IMG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY
            HZ_LICENSE_KEY,CN/HZ_LICENSE_KEY
            AZURE_STORAGE_KEY,CN/AZURE_STORAGE_KEY

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v2.0.0"
        with:
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Connect to the GKE cluster
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Deploy Istio to GKE
        if: matrix.edition == 'ee'
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update
          helm install istio-base istio/base --create-namespace -n istio-system
          helm install istiod istio/istiod -n istio-system

      - name: Wait Istio to be ready
        run: |
          kubectl create namespace ${NAMESPACE}
          kubectl label namespace ${NAMESPACE} istio-injection=enabled --overwrite
          source .github/scripts/utils.sh
          wait_condition_pod_ready istio-system app=istiod 30 3

      - name: Deploy Operator to GKE
        run: |
          make install-crds
          kubectl config set-context --current --namespace=$NAMESPACE

          DEPLOY_NAME=${RELEASE_NAME}-hazelcast-platform-operator
          echo "DEPLOY_NAME=${DEPLOY_NAME}" >> $GITHUB_ENV

          make install-operator IMG=$IMG NAMESPACE=$NAMESPACE RELEASE_NAME=$RELEASE_NAME
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Create secrets
        if: matrix.edition == 'ee'
        run: |
          kubectl create secret generic hazelcast-license-key \
            --namespace ${{ env.NAMESPACE }} --from-literal=license-key=${{ env.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 --namespace ${NAMESPACE} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az --namespace ${NAMESPACE} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ env.AZURE_STORAGE_KEY }}

      - name: Create secret for both OS and EE tests
        run: |
          kubectl create secret generic br-secret-gcp --namespace ${NAMESPACE} --from-literal=google-credentials-path='${{ env.GKE_SA_KEY }}'

      - name: Run Hazelcast E2E tests at GKE
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE RELEASE_NAME=$RELEASE_NAME REPORT_SUFFIX=${{ matrix.edition }}_01 WORKFLOW_ID=istio

      - name: Clean up after Tests
        if: always()
        run: |
          make clean-up-namespace NAMESPACE=${NAMESPACE}

      - name: Undeploy Istio after Tests
        if : matrix.edition == 'ee'
        run: |
          helm uninstall istiod -n istio-system
          helm uninstall istio-base -n istio-system
          kubectl delete namespace istio-system

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-istio
          path: allure-results/istio/

  report-generation:
    needs: ["gke-e2e-istio-tests","create-gke-cluster"]
    if: always() && (needs.gke-e2e-istio-tests.result == 'success' || needs.gke-e2e-istio-tests.result == 'failure')
    uses: ./.github/workflows/generate-test-report.yaml
    secrets: inherit
    with:
      WORKFLOW_ID: istio
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}

  cleanup-namespaces:
    if: always()
    needs: ["create-gke-cluster", "gke-e2e-istio-tests"]
    uses: ./.github/workflows/cleanup-namespace.yaml
    secrets: inherit
    with:
      cluster_name: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
      cluster_type: gke-istio
      namespaces: "test-operator-os,test-operator-ee,grafana"

  delete-cluster:
    name: Delete GKE cluster
    runs-on: ubuntu-latest
    if: always()
    needs: [create-gke-cluster, gke-e2e-istio-tests, cleanup-namespaces]
    env:
      CLUSTER_NAME: ${{ needs.create-gke-cluster.outputs.CLUSTER_NAME }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Authenticate to GCP
        uses: "google-github-actions/auth@v2.0.0"
        with:
          credentials_json: ${{ env.GKE_SA_KEY }}

      - name: Delete GKE cluster
        if: always()
        run: |-
          gcloud container clusters delete ${{ env.CLUSTER_NAME }} --zone ${{ env.GKE_ZONE }} --quiet

  slack_notify:
    name: Slack Notify
    needs: ["gke-e2e-istio-tests", "delete-cluster"]
    if: always() && ( needs.gke-e2e-istio-tests.result != 'success' || needs.delete-cluster.result != 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            SLACK_WEBHOOK_URL,CN/SLACK_WEBHOOK_URL

      - uses: 8398a7/action-slack@v3
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
